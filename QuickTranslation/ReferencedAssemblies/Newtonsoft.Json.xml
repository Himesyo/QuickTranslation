<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:tran="http://docs.himesyo.com/ref/TranslationFile" tran:filestate="Complete">
  <assembly>
    <name>Newtonsoft.Json</name>
  </assembly>
  <members>
    <member name="T:Newtonsoft.Json.Bson.BsonReader" tran:state="Complete">
      <summary>表示提供对序列化Json数据的快速、非缓存、仅转发访问的读取器。<para>原文：
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader" tran:state="Complete">
      <summary>表示提供对序列化Json数据的快速、非缓存、仅转发访问的读取器。<para>原文：
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor" tran:state="Complete">
      <summary>用指定的 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:Newtonsoft.Json.JsonReader" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read" tran:state="Complete">
      <summary>从流中读取下一个JSON标记。<para>原文：
            Reads the next JSON token from the stream.
            </para></summary>
      <returns>如果成功读取下一个令牌，则为true；如果没有更多令牌可读取，则为false。<para>原文：true if the next token was read successfully; false if there are no more tokens to read.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.String" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:Byte[]" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </para></summary>
      <returns>如果下一个JSON标记为null，则为 <see cref="T:Byte[]" /> 或null引用。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip" tran:state="Complete">
      <summary>跳过当前标记的子项。<para>原文：
            Skips the children of the current token.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)" tran:state="Complete">
      <summary>设置当前令牌。<para>原文：
            Sets the current token.
            </para></summary>
      <param name="newToken">新的代币。<para>原文：The new token.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)" tran:state="Complete">
      <summary>设置当前标记和值。<para>原文：
            Sets the current token and value.
            </para></summary>
      <param name="newToken">新的代币。<para>原文：The new token.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent" tran:state="Complete">
      <summary>根据当前令牌类型设置状态。<para>原文：
            Sets the state based on current token type.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.System#IDisposable#Dispose" tran:state="Complete">
      <summary>执行与释放、释放或重置非托管资源相关的应用程序定义的任务。<para>原文：
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)" tran:state="Complete">
      <summary>释放非托管和（可选）托管资源<para>原文：
            Releases unmanaged and - optionally - managed resources
            </para></summary>
      <param name="disposing">
        <c>true</c>释放托管和非托管资源；<c>false</c>只释放非托管资源。<para>原文：<c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close" tran:state="Complete">
      <summary>将 <see cref="T:Newtonsoft.Json.JsonReader.State" /> 更改为关闭。<para>原文：
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState" tran:state="Complete">
      <summary>获取当前读卡器状态。<para>原文：
            Gets the current reader state.
            </para></summary>
      <value>当前的读者状态。<para>原文：The current reader state.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput" tran:state="Complete">
      <summary>获取或设置一个值，该值指示在关闭读取器时是否应关闭基础流或 <see cref="T:System.IO.TextReader" /> 。<para>原文：
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </para></summary>
      <value>true关闭底层流，或在读卡器关闭时 <see cref="T:System.IO.TextReader" /> ；否则就错了。默认值为true。<para>原文：
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否可以从连续流中读取多个JSON内容而不会出错。<para>原文：
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </para></summary>
      <value>true以支持读取多个JSON内容；否则就错了。默认值为false。<para>原文：
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar" tran:state="Complete">
      <summary>获取用于括起字符串值的引号字符。<para>原文：
            Gets the quotation mark character used to enclose the value of a string.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling" tran:state="Complete">
      <summary>获取或设置读取JSON时时区的处理方式。<para>原文：
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling" tran:state="Complete">
      <summary>获取或设置读取JSON时如何解析日期格式的字符串，例如“\/date（1198908717056）\/”和“2012-03-21T05:40Z”。<para>原文：
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling" tran:state="Complete">
      <summary>获取或设置读取JSON文本时如何解析浮点数，例如1.0和9.9。<para>原文：
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateFormatString" tran:state="Complete">
      <summary>获取或设置读取JSON时自定义日期格式字符串的解析方式。<para>原文：
            Get or set how custom date formatted strings are parsed when reading JSON.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth" tran:state="Complete">
      <summary>获取或设置读取JSON时允许的最大深度。阅读超过此深度将抛出一个 <see cref="T:Newtonsoft.Json.JsonReaderException" /> 。<para>原文：
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType" tran:state="Complete">
      <summary>获取当前JSON令牌的类型。<para>原文：
            Gets the type of the current JSON token. 
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value" tran:state="Complete">
      <summary>获取当前JSON标记的文本值。<para>原文：
            Gets the text value of the current JSON token.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType" tran:state="Complete">
      <summary>获取当前JSON令牌的公共语言运行时（CLR）类型。<para>原文：
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth" tran:state="Complete">
      <summary>获取JSON文档中当前标记的深度。<para>原文：
            Gets the depth of the current token in the JSON document.
            </para></summary>
      <value>JSON文档中当前标记的深度。<para>原文：The depth of the current token in the JSON document.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path" tran:state="Complete">
      <summary>获取当前JSON令牌的路径。<para>原文：
            Gets the path of the current JSON token. 
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture" tran:state="Complete">
      <summary>获取或设置读取JSON时使用的区域性。默认值为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 。<para>原文：
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State" tran:state="Complete">
      <summary>指定读取器的状态。<para>原文：
            Specifies the state of the reader.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Start" tran:state="Complete">
      <summary>尚未调用Read方法。<para>原文：
            The Read method has not been called.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Complete" tran:state="Complete">
      <summary>已成功到达文件结尾。<para>原文：
            The end of the file has been reached successfully.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Property" tran:state="Complete">
      <summary>读者在一处房产。<para>原文：
            Reader is at a property.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart" tran:state="Complete">
      <summary>读卡器位于对象的开头。<para>原文：
            Reader is at the start of an object.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Object" tran:state="Complete">
      <summary>读者在一个对象中。<para>原文：
            Reader is in an object.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart" tran:state="Complete">
      <summary>读卡器位于数组的开头。<para>原文：
            Reader is at the start of an array.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Array" tran:state="Complete">
      <summary>读卡器在一个数组中。<para>原文：
            Reader is in an array.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Closed" tran:state="Complete">
      <summary>已调用Close方法。<para>原文：
            The Close method has been called.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.PostValue" tran:state="Complete">
      <summary>读者刚刚读到一个值。<para>原文：
            Reader has just read a value.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart" tran:state="Complete">
      <summary>读取器位于构造函数的开头。<para>原文：
            Reader is at the start of a constructor.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Constructor" tran:state="Complete">
      <summary>构造函数中的读取器。<para>原文：
            Reader in a constructor.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Error" tran:state="Complete">
      <summary>发生错误，导致读取操作无法继续。<para>原文：
            An error occurred that prevents the read operation from continuing.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Finished" tran:state="Complete">
      <summary>已成功到达文件结尾。<para>原文：
            The end of the file has been reached successfully.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </para></summary>
      <param name="stream">小溪。<para>原文：The stream.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </para></summary>
      <param name="reader">读者。<para>原文：The reader.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </para></summary>
      <param name="stream">小溪。<para>原文：The stream.</para></param>
      <param name="readRootValueAsArray">如果设置为<c>true</c>根对象将被读取为JSON数组。<para>原文：if set to <c>true</c> the root object will be read as a JSON array.</para></param>
      <param name="dateTimeKindHandling">从BSON读取 <see cref="T:System.DateTime" /> 值时使用的 <see cref="T:System.DateTimeKind" /> 。<para>原文：The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </para></summary>
      <param name="reader">读者。<para>原文：The reader.</para></param>
      <param name="readRootValueAsArray">如果设置为<c>true</c>根对象将被读取为JSON数组。<para>原文：if set to <c>true</c> the root object will be read as a JSON array.</para></param>
      <param name="dateTimeKindHandling">从BSON读取 <see cref="T:System.DateTime" /> 值时使用的 <see cref="T:System.DateTimeKind" /> 。<para>原文：The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:Byte[]" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </para></summary>
      <returns>如果下一个JSON标记为null，则为 <see cref="T:Byte[]" /> 或null引用。此方法将返回<c>null</c>在数组的末尾。<para>原文：
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsString" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.String" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：
            A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read" tran:state="Complete">
      <summary>从流中读取下一个JSON标记。<para>原文：
            Reads the next JSON token from the stream.
            </para></summary>
      <returns>如果成功读取下一个令牌，则为true；如果没有更多令牌可读取，则为false。<para>原文：
            true if the next token was read successfully; false if there are no more tokens to read.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close" tran:state="Complete">
      <summary>将 <see cref="T:Newtonsoft.Json.JsonReader.State" /> 更改为关闭。<para>原文：
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility" tran:state="Complete">
      <summary>获取或设置一个值，该值指示二进制数据读取是否应与不正确的Json兼容。NET3.5编写的二进制文件。<para>原文：
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </para></summary>
      <value>
        <c>true</c>如果二进制数据读取将与不正确的Json兼容。NET3.5写二进制文件；否则<c>false</c>.<para>原文：<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否将根对象作为JSON数组读取。<para>原文：
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </para></summary>
      <value>
        <c>true</c>如果根对象将被读取为JSON数组；否则<c>false</c>.<para>原文：<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling" tran:state="Complete">
      <summary>获取或设置从BSON读取 <see cref="T:System.DateTime" /> 值时使用的 <see cref="T:System.DateTimeKind" /> 。<para>原文：
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </para></summary>
      <value>从BSON读取 <see cref="T:System.DateTime" /> 值时使用的 <see cref="T:System.DateTimeKind" /> 。<para>原文：The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter" tran:state="Complete">
      <summary>表示一个writer，它提供了生成JSON数据的快速、非缓存、仅向前的方法。<para>原文：
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter" tran:state="Complete">
      <summary>表示一个writer，它提供了生成Json数据的快速、非缓存、仅向前的方法。<para>原文：
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor" tran:state="Complete">
      <summary>创建<c>JsonWriter</c>班<para>原文：
            Creates an instance of the <c>JsonWriter</c> class. 
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush" tran:state="Complete">
      <summary>将缓冲区中的任何内容刷新到基础流，同时也刷新基础流。<para>原文：
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close" tran:state="Complete">
      <summary>关闭此流和基础流。<para>原文：
            Closes this stream and the underlying stream.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject" tran:state="Complete">
      <summary>写入Json对象的开头。<para>原文：
            Writes the beginning of a Json object.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject" tran:state="Complete">
      <summary>写入Json对象的结尾。<para>原文：
            Writes the end of a Json object.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray" tran:state="Complete">
      <summary>写入Json数组的开头。<para>原文：
            Writes the beginning of a Json array.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray" tran:state="Complete">
      <summary>写入数组的结尾。<para>原文：
            Writes the end of an array.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)" tran:state="Complete">
      <summary>使用给定名称写入构造函数的开头。<para>原文：
            Writes the start of a constructor with the given name.
            </para></summary>
      <param name="name">构造函数的名称。<para>原文：The name of the constructor.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor" tran:state="Complete">
      <summary>写入结束构造函数。<para>原文：
            Writes the end constructor.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)" tran:state="Complete">
      <summary>在JSON对象上写入名称/值对的属性名。<para>原文：
            Writes the property name of a name/value pair on a JSON object.
            </para></summary>
      <param name="name">财产的名称。<para>原文：The name of the property.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)" tran:state="Complete">
      <summary>在JSON对象上写入名称/值对的属性名。<para>原文：
            Writes the property name of a name/value pair on a JSON object.
            </para></summary>
      <param name="name">财产的名称。<para>原文：The name of the property.</para></param>
      <param name="escape">一个标志，指示在将文本写入JSON属性名时是否应转义。<para>原文：A flag to indicate whether the text should be escaped when it is written as a JSON property name.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd" tran:state="Complete">
      <summary>写入当前Json对象或数组的结尾。<para>原文：
            Writes the end of the current Json object or array.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>写入当前 <see cref="T:Newtonsoft.Json.JsonReader" /> 标记及其子项。<para>原文：
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </para></summary>
      <param name="reader">从中读取令牌的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)" tran:state="Complete">
      <summary>写入当前 <see cref="T:Newtonsoft.Json.JsonReader" /> 标记。<para>原文：
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </para></summary>
      <param name="reader">从中读取令牌的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</para></param>
      <param name="writeChildren">指示是否应写入当前令牌的子项的标志。<para>原文：A flag indicating whether the current token's children should be written.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)" tran:state="Complete">
      <summary>写入指定的结束标记。<para>原文：
            Writes the specified end token.
            </para></summary>
      <param name="token">要写入的结束标记。<para>原文：The end token to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent" tran:state="Complete">
      <summary>写入缩进字符。<para>原文：
            Writes indent characters.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter" tran:state="Complete">
      <summary>写入JSON值分隔符。<para>原文：
            Writes the JSON value delimiter.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace" tran:state="Complete">
      <summary>写入缩进空格。<para>原文：
            Writes an indent space.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull" tran:state="Complete">
      <summary>写入空值。<para>原文：
            Writes a null value.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined" tran:state="Complete">
      <summary>写入未定义的值。<para>原文：
            Writes an undefined value.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)" tran:state="Complete">
      <summary>写入原始JSON而不更改写入程序的状态。<para>原文：
            Writes raw JSON without changing the writer's state.
            </para></summary>
      <param name="json">要编写的原始JSON。<para>原文：The raw JSON to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)" tran:state="Complete">
      <summary>在需要值的地方写入原始JSON，并更新写入程序的状态。<para>原文：
            Writes raw JSON where a value is expected and updates the writer's state.
            </para></summary>
      <param name="json">要编写的原始JSON。<para>原文：The raw JSON to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.String" /> 值。<para>原文：
            Writes a <see cref="T:System.String" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.String" /> 值。<para>原文：The <see cref="T:System.String" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int32" /> 值。<para>原文：
            Writes a <see cref="T:System.Int32" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int32" /> 值。<para>原文：The <see cref="T:System.Int32" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt32" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt32" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt32" /> 值。<para>原文：The <see cref="T:System.UInt32" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int64" /> 值。<para>原文：
            Writes a <see cref="T:System.Int64" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int64" /> 值。<para>原文：The <see cref="T:System.Int64" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt64" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt64" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt64" /> 值。<para>原文：The <see cref="T:System.UInt64" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Single" /> 值。<para>原文：
            Writes a <see cref="T:System.Single" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Single" /> 值。<para>原文：The <see cref="T:System.Single" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Double" /> 值。<para>原文：
            Writes a <see cref="T:System.Double" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Double" /> 值。<para>原文：The <see cref="T:System.Double" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Boolean" /> 值。<para>原文：
            Writes a <see cref="T:System.Boolean" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Boolean" /> 值。<para>原文：The <see cref="T:System.Boolean" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int16" /> 值。<para>原文：
            Writes a <see cref="T:System.Int16" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int16" /> 值。<para>原文：The <see cref="T:System.Int16" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt16" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt16" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt16" /> 值。<para>原文：The <see cref="T:System.UInt16" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Char" /> 值。<para>原文：
            Writes a <see cref="T:System.Char" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Char" /> 值。<para>原文：The <see cref="T:System.Char" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Byte" /> 值。<para>原文：
            Writes a <see cref="T:System.Byte" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Byte" /> 值。<para>原文：The <see cref="T:System.Byte" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.SByte" /> 值。<para>原文：
            Writes a <see cref="T:System.SByte" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.SByte" /> 值。<para>原文：The <see cref="T:System.SByte" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Decimal" /> 值。<para>原文：
            Writes a <see cref="T:System.Decimal" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Decimal" /> 值。<para>原文：The <see cref="T:System.Decimal" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTime" /> 值。<para>原文：
            Writes a <see cref="T:System.DateTime" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTime" /> 值。<para>原文：The <see cref="T:System.DateTime" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：The <see cref="T:System.DateTimeOffset" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Guid" /> 值。<para>原文：
            Writes a <see cref="T:System.Guid" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Guid" /> 值。<para>原文：The <see cref="T:System.Guid" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.TimeSpan" /> 值。<para>原文：
            Writes a <see cref="T:System.TimeSpan" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.TimeSpan" /> 值。<para>原文：The <see cref="T:System.TimeSpan" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])" tran:state="Complete">
      <summary>写入一个 <see cref="T:Byte[]" /> 值。<para>原文：
            Writes a <see cref="T:Byte[]" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:Byte[]" /> 值。<para>原文：The <see cref="T:Byte[]" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Uri" /> 值。<para>原文：
            Writes a <see cref="T:System.Uri" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Uri" /> 值。<para>原文：The <see cref="T:System.Uri" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Object" /> 值。如果该值不能作为单个JSON标记写入，则会引发错误。<para>原文：
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Object" /> 值。<para>原文：The <see cref="T:System.Object" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)" tran:state="Complete">
      <summary>写评论<code>/*...*/</code>包含指定文本的。<para>原文：
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </para></summary>
      <param name="text">要放置在注释内的文本。<para>原文：Text to place inside the comment.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)" tran:state="Complete">
      <summary>写出给定的空白。<para>原文：
            Writes out the given white space.
            </para></summary>
      <param name="ws">空白字符的字符串。<para>原文：The string of white space characters.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)" tran:state="Complete">
      <summary>设置JsonWriter的状态，<para>原文：
            Sets the state of the JsonWriter,
            </para></summary>
      <param name="token">正在编写的JsonToken。<para>原文：The JsonToken being written.</para></param>
      <param name="value">正在写入的值。<para>原文：The value being written.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput" tran:state="Complete">
      <summary>获取或设置一个值，该值指示在写入程序关闭时是否应关闭基础流或 <see cref="T:System.IO.TextReader" /> 。<para>原文：
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </para></summary>
      <value>如果为true，则关闭底层流；如果写入程序关闭，则为 <see cref="T:System.IO.TextReader" /> ；否则就错了。默认值为true。<para>原文：
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top" tran:state="Complete">
      <summary>占了上风。<para>原文：
            Gets the top.
            </para></summary>
      <value>顶部。<para>原文：The top.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState" tran:state="Complete">
      <summary>获取编写器的状态。<para>原文：
            Gets the state of the writer.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path" tran:state="Complete">
      <summary>获取编写器的路径。<para>原文：
            Gets the path of the writer. 
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting" tran:state="Complete">
      <summary>指示JSON文本输出的格式。<para>原文：
            Indicates how JSON text output is formatted.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling" tran:state="Complete">
      <summary>获取或设置如何将日期写入JSON文本。<para>原文：
            Get or set how dates are written to JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling" tran:state="Complete">
      <summary>获取或设置写入JSON文本时 <see cref="T:System.DateTime" /> 时区的处理方式。<para>原文：
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling" tran:state="Complete">
      <summary>获取或设置在编写JSON文本时如何转义字符串。<para>原文：
            Get or set how strings are escaped when writing JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling" tran:state="Complete">
      <summary>获取或设置特殊浮点数（例如 <see cref="F:System.Double.NaN" /> 、 <see cref="F:System.Double.PositiveInfinity" /> 和 <see cref="F:System.Double.NegativeInfinity" /> ）写入JSON文本的方式。<para>原文：
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString" tran:state="Complete">
      <summary>获取或设置写入JSON文本时 <see cref="T:System.DateTime" /> 和 <see cref="T:System.DateTimeOffset" /> 值的格式设置。<para>原文：
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Culture" tran:state="Complete">
      <summary>获取或设置编写JSON时使用的区域性。默认值为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 。<para>原文：
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </para></summary>
      <param name="stream">小溪。<para>原文：The stream.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </para></summary>
      <param name="writer">作者。<para>原文：The writer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush" tran:state="Complete">
      <summary>将缓冲区中的任何内容刷新到基础流，同时也刷新基础流。<para>原文：
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)" tran:state="Complete">
      <summary>写下结尾。<para>原文：
            Writes the end.
            </para></summary>
      <param name="token">代币。<para>原文：The token.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)" tran:state="Complete">
      <summary>写评论<code>/*...*/</code>包含指定文本的。<para>原文：
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </para></summary>
      <param name="text">要放置在注释内的文本。<para>原文：Text to place inside the comment.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)" tran:state="Complete">
      <summary>使用给定名称写入构造函数的开头。<para>原文：
            Writes the start of a constructor with the given name.
            </para></summary>
      <param name="name">构造函数的名称。<para>原文：The name of the constructor.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)" tran:state="Complete">
      <summary>编写原始JSON。<para>原文：
            Writes raw JSON.
            </para></summary>
      <param name="json">要编写的原始JSON。<para>原文：The raw JSON to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)" tran:state="Complete">
      <summary>在需要值的地方写入原始JSON，并更新写入程序的状态。<para>原文：
            Writes raw JSON where a value is expected and updates the writer's state.
            </para></summary>
      <param name="json">要编写的原始JSON。<para>原文：The raw JSON to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray" tran:state="Complete">
      <summary>写入Json数组的开头。<para>原文：
            Writes the beginning of a Json array.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject" tran:state="Complete">
      <summary>写入Json对象的开头。<para>原文：
            Writes the beginning of a Json object.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)" tran:state="Complete">
      <summary>在Json对象上写入名称/值对的属性名。<para>原文：
            Writes the property name of a name/value pair on a Json object.
            </para></summary>
      <param name="name">财产的名称。<para>原文：The name of the property.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close" tran:state="Complete">
      <summary>关闭此流和基础流。<para>原文：
            Closes this stream and the underlying stream.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Object" /> 值。如果该值不能作为单个JSON标记写入，则会引发错误。<para>原文：
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Object" /> 值。<para>原文：The <see cref="T:System.Object" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull" tran:state="Complete">
      <summary>写入空值。<para>原文：
            Writes a null value.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined" tran:state="Complete">
      <summary>写入未定义的值。<para>原文：
            Writes an undefined value.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.String" /> 值。<para>原文：
            Writes a <see cref="T:System.String" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.String" /> 值。<para>原文：The <see cref="T:System.String" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int32" /> 值。<para>原文：
            Writes a <see cref="T:System.Int32" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int32" /> 值。<para>原文：The <see cref="T:System.Int32" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt32" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt32" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt32" /> 值。<para>原文：The <see cref="T:System.UInt32" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int64" /> 值。<para>原文：
            Writes a <see cref="T:System.Int64" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int64" /> 值。<para>原文：The <see cref="T:System.Int64" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt64" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt64" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt64" /> 值。<para>原文：The <see cref="T:System.UInt64" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Single" /> 值。<para>原文：
            Writes a <see cref="T:System.Single" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Single" /> 值。<para>原文：The <see cref="T:System.Single" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Double" /> 值。<para>原文：
            Writes a <see cref="T:System.Double" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Double" /> 值。<para>原文：The <see cref="T:System.Double" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Boolean" /> 值。<para>原文：
            Writes a <see cref="T:System.Boolean" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Boolean" /> 值。<para>原文：The <see cref="T:System.Boolean" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int16" /> 值。<para>原文：
            Writes a <see cref="T:System.Int16" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int16" /> 值。<para>原文：The <see cref="T:System.Int16" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt16" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt16" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt16" /> 值。<para>原文：The <see cref="T:System.UInt16" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Char" /> 值。<para>原文：
            Writes a <see cref="T:System.Char" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Char" /> 值。<para>原文：The <see cref="T:System.Char" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Byte" /> 值。<para>原文：
            Writes a <see cref="T:System.Byte" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Byte" /> 值。<para>原文：The <see cref="T:System.Byte" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.SByte" /> 值。<para>原文：
            Writes a <see cref="T:System.SByte" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.SByte" /> 值。<para>原文：The <see cref="T:System.SByte" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Decimal" /> 值。<para>原文：
            Writes a <see cref="T:System.Decimal" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Decimal" /> 值。<para>原文：The <see cref="T:System.Decimal" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTime" /> 值。<para>原文：
            Writes a <see cref="T:System.DateTime" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTime" /> 值。<para>原文：The <see cref="T:System.DateTime" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：The <see cref="T:System.DateTimeOffset" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])" tran:state="Complete">
      <summary>写入一个 <see cref="T:Byte[]" /> 值。<para>原文：
            Writes a <see cref="T:Byte[]" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:Byte[]" /> 值。<para>原文：The <see cref="T:Byte[]" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Guid" /> 值。<para>原文：
            Writes a <see cref="T:System.Guid" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Guid" /> 值。<para>原文：The <see cref="T:System.Guid" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.TimeSpan" /> 值。<para>原文：
            Writes a <see cref="T:System.TimeSpan" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.TimeSpan" /> 值。<para>原文：The <see cref="T:System.TimeSpan" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Uri" /> 值。<para>原文：
            Writes a <see cref="T:System.Uri" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Uri" /> 值。<para>原文：The <see cref="T:System.Uri" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])" tran:state="Complete">
      <summary>写入表示BSON对象id的 <see cref="T:Byte[]" /> 值。<para>原文：
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </para></summary>
      <param name="value">要写入的对象ID值。<para>原文：The Object ID value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)" tran:state="Complete">
      <summary>写一个BSON正则表达式。<para>原文：
            Writes a BSON regex.
            </para></summary>
      <param name="pattern">正则表达式模式。<para>原文：The regex pattern.</para></param>
      <param name="options">正则表达式选项。<para>原文：The regex options.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling" tran:state="Complete">
      <summary>获取或设置将 <see cref="T:System.DateTime" /> 值写入BSON时使用的 <see cref="T:System.DateTimeKind" /> 。当设置为 <see cref="F:System.DateTimeKind.Unspecified" /> 时，不会发生转换。<para>原文：
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </para></summary>
      <value>将 <see cref="T:System.DateTime" /> 值写入BSON时使用的 <see cref="T:System.DateTimeKind" /> 。<para>原文：The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId" tran:state="Complete">
      <summary>表示BSON Oid（对象id）。<para>原文：
            Represents a BSON Oid (object id).
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </para></summary>
      <param name="value">Oid值。<para>原文：The Oid value.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value" tran:state="Complete">
      <summary>获取或设置Oid的值。<para>原文：
            Gets or sets the value of the Oid.
            </para></summary>
      <value>Oid的价值。<para>原文：The value of the Oid.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter" tran:state="Complete">
      <summary>将二进制值与基64字符串值进行转换。<para>原文：
            Converts a binary value to and from a base 64 string value.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter" tran:state="Complete">
      <summary>将对象转换为JSON或从JSON转换为JSON。<para>原文：
            Converts an object to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema" tran:state="Complete">
      <summary>获取JsonConverter生成的JSON的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </para></summary>
      <returns>JsonConverter生成的JSON的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead" tran:state="Complete">
      <summary>获取一个值，该值指示此 <see cref="T:Newtonsoft.Json.JsonConverter" /> 是否可以读取JSON。<para>原文：
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </para></summary>
      <value>
        <c>true</c>如果这 <see cref="T:Newtonsoft.Json.JsonConverter" /> 可以读取JSON；否则<c>false</c>.<para>原文：<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite" tran:state="Complete">
      <summary>获取一个值，该值指示此 <see cref="T:Newtonsoft.Json.JsonConverter" /> 是否可以写入JSON。<para>原文：
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </para></summary>
      <value>
        <c>true</c>如果这个 <see cref="T:Newtonsoft.Json.JsonConverter" /> 可以写JSON；否则<c>false</c>.<para>原文：<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter" tran:state="Complete">
      <summary>将 <see cref="T:System.Data.DataSet" /> 转换为JSON或从JSON转换为JSON。<para>原文：
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的值类型。<para>原文：
            Determines whether this instance can convert the specified value type.
            </para></summary>
      <param name="valueType">值的类型。<para>原文：Type of the value.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的值类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter" tran:state="Complete">
      <summary>将 <see cref="T:System.Data.DataTable" /> 转换为JSON或从JSON转换为JSON。<para>原文：
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的值类型。<para>原文：
            Determines whether this instance can convert the specified value type.
            </para></summary>
      <param name="valueType">值的类型。<para>原文：Type of the value.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的值类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1" tran:state="Complete">
      <summary>创建自定义对象<para>原文：
            Create a custom object
            </para></summary>
      <typeparam name="T">要转换的对象类型。<para>原文：The object type to convert.</para></typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)" tran:state="Complete">
      <summary>创建一个对象，然后由序列化程序填充。<para>原文：
            Creates an object which will then be populated by the serializer.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>创建的对象。<para>原文：The created object.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite" tran:state="Complete">
      <summary>获取一个值，该值指示此 <see cref="T:Newtonsoft.Json.JsonConverter" /> 是否可以写入JSON。<para>原文：
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </para></summary>
      <value>
        <c>true</c>如果这个 <see cref="T:Newtonsoft.Json.JsonConverter" /> 可以写JSON；否则<c>false</c>.<para>原文：<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase" tran:state="Complete">
      <summary>提供一个基类，用于将 <see cref="T:System.DateTime" /> 转换为JSON或从JSON转换为JSON。<para>原文：
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter" tran:state="Complete">
      <summary>将F#discriminated联合类型与JSON进行转换。<para>原文：
            Converts a F# discriminated union type to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter" tran:state="Complete">
      <summary>将实体框架EntityKey与JSON进行转换。<para>原文：
            Converts an Entity Framework EntityKey to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter" tran:state="Complete">
      <summary>将ExpandoObject转换为JSON和JSON。<para>原文：
            Converts an ExpandoObject to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite" tran:state="Complete">
      <summary>获取一个值，该值指示此 <see cref="T:Newtonsoft.Json.JsonConverter" /> 是否可以写入JSON。<para>原文：
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </para></summary>
      <value>
        <c>true</c>如果这个 <see cref="T:Newtonsoft.Json.JsonConverter" /> 可以写JSON；否则<c>false</c>.<para>原文：<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter" tran:state="Complete">
      <summary>将 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 转换为JSON或从JSON转换为JSON。<para>原文：
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter" tran:state="Complete">
      <summary>在JSON和BSON之间转换 <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> 。<para>原文：
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter" tran:state="Complete">
      <summary>在JSON和BSON之间转换 <see cref="T:System.Text.RegularExpressions.Regex" /> 。<para>原文：
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter" tran:state="Complete">
      <summary>将 <see cref="T:System.Enum" /> 转换为名称字符串值，或将其转换为名称字符串值。<para>原文：
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText" tran:state="Complete">
      <summary>获取或设置一个值，该值指示写入的枚举文本是否应为大小写。<para>原文：
            Gets or sets a value indicating whether the written enum text should be camel case.
            </para></summary>
      <value>
        <c>true</c>如果写入的枚举文本是驼峰大小写；否则<c>false</c>.<para>原文：<c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否允许使用整数值。<para>原文：
            Gets or sets a value indicating whether integer values are allowed.
            </para></summary>
      <value>
        <c>true</c>如果允许整数；否则<c>false</c>.<para>原文：<c>true</c> if integers are allowed; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling" tran:state="Complete">
      <summary>指定在由 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 进行反序列化期间初始化对象时如何使用构造函数。<para>原文：
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default" tran:state="Complete">
      <summary>首先尝试使用公共默认构造函数，然后退回到单个参数化构造函数，然后是非公共默认构造函数。<para>原文：
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor" tran:state="Complete">
      <summary>Json。NET将使用非公共默认构造函数，然后再返回到参数化构造函数。<para>原文：
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter" tran:state="Complete">
      <summary>将 <see cref="T:System.Version" /> 转换为字符串（例如“1.2.3.4”）。<para>原文：
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在转换的JSON的现有属性值。<para>原文：The existing property value of the JSON that is being converted.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的对象类型。<para>原文：
            Determines whether this instance can convert the specified object type.
            </para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的对象类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.FloatFormatHandling" tran:state="Complete">
      <summary>指定写入特殊浮点数时的浮点格式处理选项，例如 <see cref="F:System.Double.NaN" /> 、 <see cref="F:System.Double.PositiveInfinity" /> 和 <see cref="F:System.Double.NegativeInfinity" /> 与 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.String" tran:state="Complete">
      <summary>在JSON中以字符串形式写入特殊的浮点值，例如“NaN”、“Infinity”和“-Infinity”。<para>原文：
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol" tran:state="Complete">
      <summary>在JSON中写特殊的浮点值作为符号，例如NaN、Infinity、-Infinity。请注意，这将生成无效的JSON。<para>原文：
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue" tran:state="Complete">
      <summary>在JSON中写入特殊的浮点值作为属性的默认值，例如 <see cref="T:System.Double" /> 属性为0.0， <see cref="T:System.Nullable`1" /> 属性为null。<para>原文：
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, null for a <see cref="T:System.Nullable`1" /> property.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatParseHandling" tran:state="Complete">
      <summary>指定读取JSON文本时如何解析浮点数，例如1.0和9.9。<para>原文：
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Double" tran:state="Complete">
      <summary>浮点数被解析为 <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" /> 。<para>原文：
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal" tran:state="Complete">
      <summary>浮点数被解析为 <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" /> 。<para>原文：
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 如何序列化集合。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 如何序列化对象。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)" tran:state="Complete">
      <summary>用指定的容器Id初始化 <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </para></summary>
      <param name="id">容器Id。<para>原文：The container Id.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id" tran:state="Complete">
      <summary>获取或设置id。<para>原文：
            Gets or sets the id.
            </para></summary>
      <value>身份证。<para>原文：The id.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title" tran:state="Complete">
      <summary>获取或设置标题。<para>原文：
            Gets or sets the title.
            </para></summary>
      <value>标题。<para>原文：The title.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description" tran:state="Complete">
      <summary>获取或设置描述。<para>原文：
            Gets or sets the description.
            </para></summary>
      <value>描述。<para>原文：The description.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType" tran:state="Complete">
      <summary>获取集合的项转换器。<para>原文：
            Gets the collection's items converter.
            </para></summary>
      <value>集合的项目转换器。<para>原文：The collection's items converter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否保留对象引用。<para>原文：
            Gets or sets a value that indicates whether to preserve object references.
            </para></summary>
      <value>
        <c>true</c>保持对象引用；否则<c>false</c>.默认值为<c>false</c>.<para>原文：<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否保留集合的项引用。<para>原文：
            Gets or sets a value that indicates whether to preserve collection's items references.
            </para></summary>
      <value>
        <c>true</c>保留集合的项目对象引用；否则<c>false</c>.默认值为<c>false</c>.<para>原文：<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置序列化集合项时使用的引用循环处理。<para>原文：
            Gets or sets the reference loop handling used when serializing the collection's items.
            </para></summary>
      <value>参考循环处理。<para>原文：The reference loop handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling" tran:state="Complete">
      <summary>获取或设置序列化集合项时使用的类型名称处理。<para>原文：
            Gets or sets the type name handling used when serializing the collection's items.
            </para></summary>
      <value>类型名称处理。<para>原文：The type name handling.</para></value>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)" tran:state="Complete">
      <summary>用指定的容器Id初始化 <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </para></summary>
      <param name="id">容器Id。<para>原文：The container Id.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException" tran:state="Complete">
      <summary>Json序列化或反序列化期间发生错误时引发的异常。<para>原文：
            The exception thrown when an error occurs during Json serialization or deserialization.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)" tran:state="Complete">
      <summary>使用指定的错误消息初始化 <see cref="T:Newtonsoft.Json.JsonException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)" tran:state="Complete">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用初始化 <see cref="T:Newtonsoft.Json.JsonException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
      <param name="innerException">导致当前异常的异常，或者如果未指定内部异常，则为空引用（在Visual Basic中为Nothing）。<para>原文：The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </para></summary>
      <param name="info">保存有关抛出异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 。<para>原文：The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</para></param>
      <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 。<para>原文：The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</para></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为空。<para>原文：The <paramref name="info" /> parameter is null. </para></exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">类名为null或 <see cref="P:System.Exception.HResult" /> 为零（0）。<para>原文：The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </para></exception>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling" tran:state="Complete">
      <summary>指定写入JSON文本时日期的格式。<para>原文：
            Specifies how dates are formatted when writing JSON text.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" tran:state="Complete">
      <summary>日期以ISO 8601格式书写，例如“2012-03-21T05:40Z”。<para>原文：
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat" tran:state="Complete">
      <summary>日期以Microsoft JSON格式书写，例如“\/Date（1198908717056）\/”。<para>原文：
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling" tran:state="Complete">
      <summary>指定读取JSON文本时如何解析日期格式的字符串，例如“\/date（1198908717056）\/”和“2012-03-21T05:40Z”。<para>原文：
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None" tran:state="Complete">
      <summary>日期格式的字符串不会解析为日期类型，而是作为字符串读取。<para>原文：
            Date formatted strings are not parsed to a date type and are read as strings.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime" tran:state="Complete">
      <summary>日期格式的字符串，例如“\/Date（1198908717056）\/”和“2012-03-21T05:40Z”，被解析为 <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" /> 。<para>原文：
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" tran:state="Complete">
      <summary>日期格式的字符串，例如“\/Date（1198908717056）\/”和“2012-03-21T05:40Z”，被解析为 <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" /> 。<para>原文：
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling" tran:state="Complete">
      <summary>指定在字符串和 <see cref="T:System.DateTime" /> 之间转换时如何处理时间值。<para>原文：
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local" tran:state="Complete">
      <summary>按当地时间处理。如果 <see cref="T:System.DateTime" /> 对象表示协调世界时（UTC），则将其转换为本地时间。<para>原文：
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc" tran:state="Complete">
      <summary>将其视为UTC。如果 <see cref="T:System.DateTime" /> 对象表示本地时间，则将其转换为UTC。<para>原文：
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified" tran:state="Complete">
      <summary>如果将 <see cref="T:System.DateTime" /> 转换为字符串，则将其视为本地时间。如果字符串转换为 <see cref="T:System.DateTime" /> ，如果指定了时区，则转换为本地时间。<para>原文：
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" tran:state="Complete">
      <summary>转换时应保留时区信息。<para>原文：
            Time zone information should be preserved when converting.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonTextWriter" /> 的格式选项。<para>原文：
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None" tran:state="Complete">
      <summary>没有应用特殊格式。这是默认设置。<para>原文：
            No special formatting is applied. This is the default.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented" tran:state="Complete">
      <summary>使子对象根据 <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> 和 <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> 设置缩进。<para>原文：
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 在反序列化该对象时使用指定的构造函数。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将没有匹配类成员的属性反序列化到指定的集合中，并在序列化期间写入值。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData" tran:state="Complete">
      <summary>获取或设置一个值，该值指示序列化对象时是否写入扩展数据。<para>原文：
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </para></summary>
      <value>
        <c>true</c>序列化对象时写入扩展数据；否则<c>false</c>.默认值为<c>true</c>.<para>原文：<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData" tran:state="Complete">
      <summary>获取或设置一个值，该值指示在反序列化对象时是否读取扩展数据。<para>原文：
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </para></summary>
      <value>
        <c>true</c>在反序列化对象时读取扩展数据；否则<c>false</c>.默认值为<c>true</c>.<para>原文：<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings" tran:state="Complete">
      <summary>指定合并JSON时使用的设置。<para>原文：
            Specifies the settings used when merging JSON.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling" tran:state="Complete">
      <summary>获取或设置合并JSON数组时使用的方法。<para>原文：
            Gets or sets the method used when merging JSON arrays.
            </para></summary>
      <value>合并JSON数组时使用的方法。<para>原文：The method used when merging JSON arrays.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling" tran:state="Complete">
      <summary>指定如何将JSON数组合并在一起。<para>原文：
            Specifies how JSON arrays are merged together.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat" tran:state="Complete">
      <summary>连接数组。<para>原文：Concatenate arrays.</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union" tran:state="Complete">
      <summary>联合数组，跳过已存在的项。<para>原文：Union arrays, skipping items that already exist.</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace" tran:state="Complete">
      <summary>替换所有数组项。<para>原文：Replace all array items.</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge" tran:state="Complete">
      <summary>通过索引将数组项合并在一起。<para>原文：Merge array items together, matched by index.</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.MetadataPropertyHandling" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的元数据属性处理选项。<para>原文：
            Specifies metadata property handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default" tran:state="Complete">
      <summary>读取位于JSON对象开头的元数据属性。<para>原文：
            Read metadata properties located at the start of a JSON object.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead" tran:state="Complete">
      <summary>读取JSON对象中任意位置的元数据属性。请注意，此设置将影响性能。<para>原文：
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore" tran:state="Complete">
      <summary>不要尝试读取元数据属性。<para>原文：
            Do not try to read metadata properties.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter" tran:state="Complete">
      <summary>表示写入应用程序的 <see cref="T:System.Diagnostics.TraceListener" /> 实例的跟踪编写器。<para>原文：
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter" tran:state="Complete">
      <summary>表示跟踪编写器。<para>原文：
            Represents a trace writer.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)" tran:state="Complete">
      <summary>写入指定的跟踪级别、消息和可选异常。<para>原文：
            Writes the specified trace level, message and optional exception.
            </para></summary>
      <param name="level">写入此跟踪的 <see cref="T:System.Diagnostics.TraceLevel" /> 。<para>原文：The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</para></param>
      <param name="message">跟踪信息。<para>原文：The trace message.</para></param>
      <param name="ex">跟踪异常。此参数是可选的。<para>原文：The trace exception. This parameter is optional.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter" tran:state="Complete">
      <summary>获取将用于筛选传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel" /> 。例如，过滤器级别为<code>Info</code>将排除<code>Verbose</code>信息和包括<code>Info</code>,<code>Warning</code>和<code>Error</code>信息。<para>原文：
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </para></summary>
      <value>将用于过滤传递给写入程序的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel" /> 。<para>原文：The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</para></value>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)" tran:state="Complete">
      <summary>写入指定的跟踪级别、消息和可选异常。<para>原文：
            Writes the specified trace level, message and optional exception.
            </para></summary>
      <param name="level">写入此跟踪的 <see cref="T:System.Diagnostics.TraceLevel" /> 。<para>原文：The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</para></param>
      <param name="message">跟踪信息。<para>原文：The trace message.</para></param>
      <param name="ex">跟踪异常。此参数是可选的。<para>原文：The trace exception. This parameter is optional.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter" tran:state="Complete">
      <summary>获取将用于筛选传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel" /> 。例如，过滤器级别为<code>Info</code>将排除<code>Verbose</code>信息和包括<code>Info</code>,<code>Warning</code>和<code>Error</code>信息。<para>原文：
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </para></summary>
      <value>将用于过滤传递给写入程序的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel" /> 。<para>原文：
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" tran:state="Complete">
      <summary>使用动态方法获取并设置a <see cref="T:System.Reflection.MemberInfo" /> 的值。<para>原文：
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider" tran:state="Complete">
      <summary>提供获取和设置值的方法。<para>原文：
            Provides methods to get and set values.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)" tran:state="Complete">
      <summary>设置值。<para>原文：
            Sets the value.
            </para></summary>
      <param name="target">要设置值的目标。<para>原文：The target to set the value on.</para></param>
      <param name="value">要在目标上设置的值。<para>原文：The value to set on the target.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)" tran:state="Complete">
      <summary>获取值。<para>原文：
            Gets the value.
            </para></summary>
      <param name="target">要从中获取值的目标。<para>原文：The target to get the value from.</para></param>
      <returns>价值。<para>原文：The value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> class.
            </para></summary>
      <param name="memberInfo">会员信息。<para>原文：The member info.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)" tran:state="Complete">
      <summary>设置值。<para>原文：
            Sets the value.
            </para></summary>
      <param name="target">要设置值的目标。<para>原文：The target to set the value on.</para></param>
      <param name="value">要在目标上设置的值。<para>原文：The value to set on the target.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)" tran:state="Complete">
      <summary>获取值。<para>原文：
            Gets the value.
            </para></summary>
      <param name="target">要从中获取值的目标。<para>原文：The target to get the value from.</para></param>
      <returns>价值。<para>原文：The value.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType" tran:state="Complete">
      <summary>获取合同的基础类型。<para>原文：
            Gets the underlying type for the contract.
            </para></summary>
      <value>合同的基础类型。<para>原文：The underlying type for the contract.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType" tran:state="Complete">
      <summary>获取或设置反序列化期间创建的类型。<para>原文：
            Gets or sets the type created during deserialization.
            </para></summary>
      <value>反序列化期间创建的类型。<para>原文：The type created during deserialization.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference" tran:state="Complete">
      <summary>获取或设置此类型协定是否序列化为引用。<para>原文：
            Gets or sets whether this type contract is serialized as a reference.
            </para></summary>
      <value>是否将此类型的协定序列化为引用。<para>原文：Whether this type contract is serialized as a reference.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter" tran:state="Complete">
      <summary>获取或设置此合约的默认值 <see cref="T:Newtonsoft.Json.JsonConverter" /> 。<para>原文：
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </para></summary>
      <value>转换器。<para>原文：The converter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks" tran:state="Complete">
      <summary>获取或设置对象反序列化后立即调用的所有方法。<para>原文：
            Gets or sets all methods called immediately after deserialization of the object.
            </para></summary>
      <value>对象反序列化后立即调用的方法。<para>原文：The methods called immediately after deserialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks" tran:state="Complete">
      <summary>获取或设置对象反序列化期间调用的所有方法。<para>原文：
            Gets or sets all methods called during deserialization of the object.
            </para></summary>
      <value>对象反序列化期间调用的方法。<para>原文：The methods called during deserialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks" tran:state="Complete">
      <summary>获取或设置对象图序列化后调用的所有方法。<para>原文：
            Gets or sets all methods called after serialization of the object graph.
            </para></summary>
      <value>对象图序列化后调用的方法。<para>原文：The methods called after serialization of the object graph.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks" tran:state="Complete">
      <summary>获取或设置对象序列化之前调用的所有方法。<para>原文：
            Gets or sets all methods called before serialization of the object.
            </para></summary>
      <value>对象序列化之前调用的方法。<para>原文：The methods called before serialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks" tran:state="Complete">
      <summary>获取或设置在对象序列化过程中引发错误时调用的所有方法。<para>原文：
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </para></summary>
      <value>对象序列化期间引发错误时调用的方法。<para>原文：The methods called when an error is thrown during the serialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized" tran:state="Complete">
      <summary>获取或设置对象反序列化后立即调用的方法。<para>原文：
            Gets or sets the method called immediately after deserialization of the object.
            </para></summary>
      <value>对象反序列化后立即调用的方法。<para>原文：The method called immediately after deserialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing" tran:state="Complete">
      <summary>获取或设置在对象反序列化期间调用的方法。<para>原文：
            Gets or sets the method called during deserialization of the object.
            </para></summary>
      <value>对象反序列化期间调用的方法。<para>原文：The method called during deserialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized" tran:state="Complete">
      <summary>获取或设置对象图序列化后调用的方法。<para>原文：
            Gets or sets the method called after serialization of the object graph.
            </para></summary>
      <value>对象图序列化后调用的方法。<para>原文：The method called after serialization of the object graph.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing" tran:state="Complete">
      <summary>获取或设置在序列化对象之前调用的方法。<para>原文：
            Gets or sets the method called before serialization of the object.
            </para></summary>
      <value>在序列化对象之前调用的方法。<para>原文：The method called before serialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError" tran:state="Complete">
      <summary>获取或设置在对象序列化过程中引发错误时调用的方法。<para>原文：
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </para></summary>
      <value>对象序列化期间引发错误时调用的方法。<para>原文：The method called when an error is thrown during the serialization of the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" tran:state="Complete">
      <summary>获取或设置用于创建对象的默认创建者方法。<para>原文：
            Gets or sets the default creator method used to create the object.
            </para></summary>
      <value>用于创建对象的默认创建者方法。<para>原文：The default creator method used to create the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic" tran:state="Complete">
      <summary>获取或设置一个值，该值指示默认创建者是否为非公共。<para>原文：
            Gets or sets a value indicating whether the default creator is non public.
            </para></summary>
      <value>
        <c>true</c>如果默认对象创建者是非公共的；否则<c>false</c>.<para>原文：<c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter" tran:state="Complete">
      <summary>获取或设置默认集合项 <see cref="T:Newtonsoft.Json.JsonConverter" /> 。<para>原文：
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </para></summary>
      <value>转换器。<para>原文：The converter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference" tran:state="Complete">
      <summary>获取或设置一个值，该值指示集合项是否保留对象引用。<para>原文：
            Gets or sets a value indicating whether the collection items preserve object references.
            </para></summary>
      <value>
        <c>true</c>如果集合项保留对象引用；否则<c>false</c>.<para>原文：<c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置集合项引用循环处理。<para>原文：
            Gets or sets the collection item reference loop handling.
            </para></summary>
      <value>参考循环处理。<para>原文：The reference loop handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling" tran:state="Complete">
      <summary>获取或设置集合项类型名称处理。<para>原文：
            Gets or sets the collection item type name handling.
            </para></summary>
      <value>类型名称处理。<para>原文：The type name handling.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" tran:state="Complete">
      <summary>表示写入内存的跟踪编写器。当达到跟踪消息限制时，旧的跟踪消息将在添加新消息时被删除。<para>原文：
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)" tran:state="Complete">
      <summary>写入指定的跟踪级别、消息和可选异常。<para>原文：
            Writes the specified trace level, message and optional exception.
            </para></summary>
      <param name="level">写入此跟踪的 <see cref="T:System.Diagnostics.TraceLevel" /> 。<para>原文：The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</para></param>
      <param name="message">跟踪信息。<para>原文：The trace message.</para></param>
      <param name="ex">跟踪异常。此参数是可选的。<para>原文：The trace exception. This parameter is optional.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages" tran:state="Complete">
      <summary>返回最近跟踪消息的枚举。<para>原文：
            Returns an enumeration of the most recent trace messages.
            </para></summary>
      <returns>最近跟踪消息的枚举。<para>原文：An enumeration of the most recent trace messages.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString" tran:state="Complete">
      <summary>返回最近跟踪消息的 <see cref="T:System.String" /> 。<para>原文：
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </para></summary>
      <returns>最近跟踪消息的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> of the most recent trace messages.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter" tran:state="Complete">
      <summary>获取将用于筛选传递给编写器的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel" /> 。例如，过滤器级别为<code>Info</code>将排除<code>Verbose</code>信息和包括<code>Info</code>,<code>Warning</code>和<code>Error</code>信息。<para>原文：
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </para></summary>
      <value>将用于过滤传递给写入程序的跟踪消息的 <see cref="T:System.Diagnostics.TraceLevel" /> 。<para>原文：
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo" tran:state="Complete">
      <summary>提供一个接口，使类能够返回行和位置信息。<para>原文：
            Provides an interface to enable a class to return line and position information.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo" tran:state="Complete">
      <summary>获取一个值，该值指示类是否可以返回行信息。<para>原文：
            Gets a value indicating whether the class can return line information.
            </para></summary>
      <returns>
        <c>true</c>是否可以提供行号和行号位置；否则<c>false</c>.<para>原文：<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber" tran:state="Complete">
      <summary>获取当前行号。<para>原文：
            Gets the current line number.
            </para></summary>
      <value>当前行号，如果没有可用的行信息，则为0（例如，HasLineInfo返回false）。<para>原文：The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</para></value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition" tran:state="Complete">
      <summary>获取当前行位置。<para>原文：
            Gets the current line position.
            </para></summary>
      <value>当前行位置或0（如果没有行信息可用）（例如，HasLineInfo返回false）。<para>原文：The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</para></value>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling" tran:state="Complete">
      <summary>指定写入JSON文本时如何转义字符串。<para>原文：
            Specifies how strings are escaped when writing JSON text.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default" tran:state="Complete">
      <summary>仅转义控制字符（例如换行符）。<para>原文：
            Only control characters (e.g. newline) are escaped.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii" tran:state="Complete">
      <summary>所有非ASCII字符和控制字符（例如换行符）都将转义。<para>原文：
            All non-ASCII and control characters (e.g. newline) are escaped.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml" tran:state="Complete">
      <summary>HTML（&lt;，&gt;，&amp;，，，”）和控制字符（例如换行符）被转义。<para>原文：
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw" tran:state="Complete">
      <summary>表示原始JSON字符串。<para>原文：
            Represents a raw JSON string.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue" tran:state="Complete">
      <summary>表示JSON中的值（字符串、整数、日期等）。<para>原文：
            Represents a value in JSON (string, integer, date, etc).
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>表示一个抽象的JSON标记。<para>原文：
            Represents an abstract JSON token.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1" tran:state="Complete">
      <summary>表示 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 对象的集合。<para>原文：
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </para></summary>
      <typeparam name="T">代币的类型<para>原文：The type of token</para></typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)" tran:state="Complete">
      <summary>获取具有指定键的 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> 。<para>原文：
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </para></summary>
      <value></value>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>比较两个标记的值，包括所有子代标记的值。<para>原文：
            Compares the values of two tokens, including the values of all descendant tokens.
            </para></summary>
      <param name="t1">第一个要比较的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</para></param>
      <param name="t2">第二个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 进行比较。<para>原文：The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</para></param>
      <returns>如果标记相等，则为true；否则就错了。<para>原文：true if the tokens are equal; otherwise false.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)" tran:state="Complete">
      <summary>在该标记之后立即添加指定的内容。<para>原文：
            Adds the specified content immediately after this token.
            </para></summary>
      <param name="content">包含简单内容的内容对象，或在此标记后添加的内容对象集合。<para>原文：A content object that contains simple content or a collection of content objects to be added after this token.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)" tran:state="Complete">
      <summary>将指定的内容添加到此令牌之前。<para>原文：
            Adds the specified content immediately before this token.
            </para></summary>
      <param name="content">包含简单内容的内容对象或要在此标记之前添加的内容对象集合。<para>原文：A content object that contains simple content or a collection of content objects to be added before this token.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors" tran:state="Complete">
      <summary>返回此标记的祖先标记的集合。<para>原文：
            Returns a collection of the ancestor tokens of this token.
            </para></summary>
      <returns>此标记的祖先标记的集合。<para>原文：A collection of the ancestor tokens of this token.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf" tran:state="Complete">
      <summary>按文档顺序返回此标记后的同级标记集合。<para>原文：
            Returns a collection of the sibling tokens after this token, in document order.
            </para></summary>
      <returns>按文档顺序排列在该标记之后的兄弟标记的集合。<para>原文：A collection of the sibling tokens after this tokens, in document order.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf" tran:state="Complete">
      <summary>按文档顺序返回此标记之前的同级标记集合。<para>原文：
            Returns a collection of the sibling tokens before this token, in document order.
            </para></summary>
      <returns>此标记之前的兄弟标记的集合，按文档顺序排列。<para>原文：A collection of the sibling tokens before this token, in document order.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)" tran:state="Complete">
      <summary>获取将指定键转换为指定类型的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </para></summary>
      <typeparam name="T">要将令牌转换为的类型。<para>原文：The type to convert the token to.</para></typeparam>
      <param name="key">令牌密钥。<para>原文：The token key.</para></param>
      <returns>转换后的令牌值。<para>原文：The converted token value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children" tran:state="Complete">
      <summary>按文档顺序返回此标记的子标记的集合。<para>原文：
            Returns a collection of the child tokens of this token, in document order.
            </para></summary>
      <returns>一个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，按文档顺序包含该 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的子标记。<para>原文：An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1" tran:state="Complete">
      <summary>按文档顺序返回此标记的子标记的集合，并按指定类型进行筛选。<para>原文：
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </para></summary>
      <typeparam name="T">用于筛选子令牌的类型。<para>原文：The type to filter the child tokens on.</para></typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> 包含此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的子标记，按文档顺序排列。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1" tran:state="Complete">
      <summary>按文档顺序返回此标记的子值的集合。<para>原文：
            Returns a collection of the child values of this token, in document order.
            </para></summary>
      <typeparam name="T">要将值转换为的类型。<para>原文：The type to convert the values to.</para></typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> 按文档顺序包含此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的子值。<para>原文：A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove" tran:state="Complete">
      <summary>从其父代中删除此令牌。<para>原文：
            Removes this token from its parent.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>用指定的令牌替换此令牌。<para>原文：
            Replaces this token with the specified token.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</para></param>
      <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString" tran:state="Complete">
      <summary>返回此令牌的缩进JSON。<para>原文：
            Returns the indented JSON for this token.
            </para></summary>
      <returns>此令牌的缩进JSON。<para>原文：
            The indented JSON for this token.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>使用给定的格式和转换器返回此令牌的JSON。<para>原文：
            Returns the JSON for this token using the given formatting and converters.
            </para></summary>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</para></param>
      <returns>使用给定的格式和转换器为该令牌创建JSON。<para>原文：The JSON for this token using the given formatting and converters.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Boolean" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.DateTimeOffset" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Int64" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Int32" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Int16" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.UInt16" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Char" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Byte" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.SByte" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.DateTime" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Decimal" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Nullable`1" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Double" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Single" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.String" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.UInt32" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.UInt64" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Byte[]" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Guid" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Guid" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.TimeSpan" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.TimeSpan" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri" tran:state="Complete">
      <summary>执行从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 到 <see cref="T:System.Uri" /> 的显式转换。<para>原文：
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>转换的结果。<para>原文：The result of the conversion.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Boolean" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.DateTimeOffset" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Byte" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.SByte" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Int16" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.UInt16" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Int32" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.DateTime" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Decimal" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Double" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Single" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.String" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.UInt32" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.UInt64" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Byte[]" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Uri" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.TimeSpan" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Guid" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken" tran:state="Complete">
      <summary>执行从 <see cref="T:System.Nullable`1" /> 到 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的隐式转换。<para>原文：
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="value">要从中创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 的值。<para>原文：The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</para></param>
      <returns>用指定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader" tran:state="Complete">
      <summary>为此令牌创建一个 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </para></summary>
      <returns>可用于读取此标记及其子代的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" tran:state="Complete">
      <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </para></summary>
      <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的对象。<para>原文：The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> 具有指定对象的值<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 从对象创建 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
      <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的对象。<para>原文：The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></param>
      <param name="jsonSerializer">读取对象时将使用的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> 具有指定对象的值<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1" tran:state="Complete">
      <summary>创建指定的。来自 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的网络类型。<para>原文：
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <typeparam name="T">令牌将反序列化到的对象类型。<para>原文：The object type that the token will be deserialized to.</para></typeparam>
      <returns>根据JSON值创建的新对象。<para>原文：The new object created from the JSON value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)" tran:state="Complete">
      <summary>创建指定的。来自 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的网络类型。<para>原文：
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <param name="objectType">令牌将反序列化到的对象类型。<para>原文：The object type that the token will be deserialized to.</para></param>
      <returns>根据JSON值创建的新对象。<para>原文：The new object created from the JSON value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>创建指定的。使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 中获取净类型。<para>原文：
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
      <typeparam name="T">令牌将反序列化到的对象类型。<para>原文：The object type that the token will be deserialized to.</para></typeparam>
      <param name="jsonSerializer">创建对象时将使用的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</para></param>
      <returns>根据JSON值创建的新对象。<para>原文：The new object created from the JSON value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>创建指定的。使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 从 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 中获取净类型。<para>原文：
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
      <param name="objectType">令牌将反序列化到的对象类型。<para>原文：The object type that the token will be deserialized to.</para></param>
      <param name="jsonSerializer">创建对象时将使用的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</para></param>
      <returns>根据JSON值创建的新对象。<para>原文：The new object created from the JSON value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>从 <see cref="T:Newtonsoft.Json.JsonReader" /> 创建 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </para></summary>
      <param name="reader">位于标记处的一个 <see cref="T:Newtonsoft.Json.JsonReader" /> 用于读入该 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></param>
      <returns>包含从读取器读取的标记及其子代标记的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。令牌的运行时类型由读取器中遇到的第一个令牌的令牌类型决定。<para>原文：
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)" tran:state="Complete">
      <summary>从包含JSON的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </para></summary>
      <param name="json">包含JSON的 <see cref="T:System.String" /> 。<para>原文：A <see cref="T:System.String" /> that contains JSON.</para></param>
      <returns>从包含JSON的字符串填充的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>从 <see cref="T:Newtonsoft.Json.JsonReader" /> 创建 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </para></summary>
      <param name="reader">位于标记处的一个 <see cref="T:Newtonsoft.Json.JsonReader" /> 用于读入该 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></param>
      <returns>包含从读取器读取的标记及其子代标记的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。令牌的运行时类型由读取器中遇到的第一个令牌的令牌类型决定。<para>原文：
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)" tran:state="Complete">
      <summary>使用JPath表达式选择一个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。选择与对象路径匹配的标记。<para>原文：
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </para></summary>
      <param name="path">包含JPath表达式的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that contains a JPath expression.
            </para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> ，或null。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or null.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)" tran:state="Complete">
      <summary>使用JPath表达式选择一个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。选择与对象路径匹配的标记。<para>原文：
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </para></summary>
      <param name="path">包含JPath表达式的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that contains a JPath expression.
            </para></param>
      <param name="errorWhenNoMatch">一个标志，指示在计算表达式的一部分时，如果找不到标记，是否应引发错误。<para>原文：A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)" tran:state="Complete">
      <summary>使用JPath表达式选择元素的集合。<para>原文：
            Selects a collection of elements using a JPath expression.
            </para></summary>
      <param name="path">包含JPath表达式的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that contains a JPath expression.
            </para></param>
      <returns>包含所选元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)" tran:state="Complete">
      <summary>使用JPath表达式选择元素的集合。<para>原文：
            Selects a collection of elements using a JPath expression.
            </para></summary>
      <param name="path">包含JPath表达式的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that contains a JPath expression.
            </para></param>
      <param name="errorWhenNoMatch">一个标志，指示在计算表达式的一部分时，如果找不到标记，是否应引发错误。<para>原文：A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</para></param>
      <returns>包含所选元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)" tran:state="Complete">
      <summary>返回负责对该对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 。<para>原文：
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </para></summary>
      <param name="parameter">运行时值的表达式树表示形式。<para>原文：The expression tree representation of the runtime value.</para></param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 来绑定此对象。<para>原文：
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)" tran:state="Complete">
      <summary>返回负责对该对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 。<para>原文：
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </para></summary>
      <param name="parameter">运行时值的表达式树表示形式。<para>原文：The expression tree representation of the runtime value.</para></param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 来绑定此对象。<para>原文：
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone" tran:state="Complete">
      <summary>创建 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的新实例。所有子标记都是递归克隆的。<para>原文：
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </para></summary>
      <returns>
        <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的一个新实例。<para>原文：A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer" tran:state="Complete">
      <summary>获取一个比较器，该比较器可以比较两个标记的值相等。<para>原文：
            Gets a comparer that can compare two tokens for value equality.
            </para></summary>
      <value>可以比较两个节点的值相等的 <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> 。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent" tran:state="Complete">
      <summary>获取或设置父级。<para>原文：
            Gets or sets the parent.
            </para></summary>
      <value>父母。<para>原文：The parent.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root" tran:state="Complete">
      <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的根 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <value>这个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的根 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type" tran:state="Complete">
      <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的节点类型。<para>原文：
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <value>类型。<para>原文：The type.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues" tran:state="Complete">
      <summary>获取一个值，该值指示此令牌是否具有子令牌。<para>原文：
            Gets a value indicating whether this token has child tokens.
            </para></summary>
      <value>
        <c>true</c>如果该标记具有子值；否则<c>false</c>.<para>原文：<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next" tran:state="Complete">
      <summary>获取此节点的下一个同级令牌。<para>原文：
            Gets the next sibling token of this node.
            </para></summary>
      <value>包含下一个同级令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous" tran:state="Complete">
      <summary>获取此节点的上一个同级令牌。<para>原文：
            Gets the previous sibling token of this node.
            </para></summary>
      <value>包含上一个同级令牌的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Path" tran:state="Complete">
      <summary>获取JSON标记的路径。<para>原文：
            Gets the path of the JSON token. 
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)" tran:state="Complete">
      <summary>获取具有指定键的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </para></summary>
      <value>使用指定的键启动 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First" tran:state="Complete">
      <summary>获取此令牌的第一个子令牌。<para>原文：
            Get the first child token of this token.
            </para></summary>
      <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的第一个子标记的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last" tran:state="Complete">
      <summary>获取此令牌的最后一个子令牌。<para>原文：
            Get the last child token of this token.
            </para></summary>
      <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的最后一个子标记的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</para></value>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)" tran:state="Complete">
      <summary>从另一个 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </para></summary>
      <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 对象。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)" tran:state="Complete">
      <summary>用给定的值初始化 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)" tran:state="Complete">
      <summary>使用给定的值创建 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 注释。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>带有给定值的 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 注释。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)" tran:state="Complete">
      <summary>使用给定值创建一个 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 字符串。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </para></summary>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>具有给定值的 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 字符串。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull" tran:state="Complete">
      <summary>创建一个 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 空值。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </para></summary>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> 空值。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined" tran:state="Complete">
      <summary>创建一个 <see cref="T:Newtonsoft.Json.Linq.JValue" /> 空值。<para>原文：
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </para></summary>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> 空值。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</para></param>
      <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)" tran:state="Complete">
      <summary>指示当前对象是否等于同一类型的另一个对象。<para>原文：
            Indicates whether the current object is equal to another object of the same type.
            </para></summary>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为true；否则就错了。<para>原文：
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </para></returns>
      <param name="other">要与此对象进行比较的对象。<para>原文：An object to compare with this object.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)" tran:state="Complete">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Object" /> 。<para>原文：
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </para></summary>
      <param name="obj">将 <see cref="T:System.Object" /> 与电流 <see cref="T:System.Object" /> 进行比较。<para>原文：The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</para></param>
      <returns>如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" /> ，则为true；否则就错了。<para>原文：
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </para></returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="obj" /> 参数为空。<para>原文：
            The <paramref name="obj" /> parameter is null.
            </para></exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode" tran:state="Complete">
      <summary>用作特定类型的哈希函数。<para>原文：
            Serves as a hash function for a particular type.
            </para></summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。<para>原文：
            A hash code for the current <see cref="T:System.Object" />.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString" tran:state="Complete">
      <summary>返回表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            Returns a <see cref="T:System.String" /> that represents this instance.
            </para></summary>
      <returns>表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that represents this instance.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)" tran:state="Complete">
      <summary>返回表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            Returns a <see cref="T:System.String" /> that represents this instance.
            </para></summary>
      <param name="format">格式。<para>原文：The format.</para></param>
      <returns>表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that represents this instance.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)" tran:state="Complete">
      <summary>返回表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            Returns a <see cref="T:System.String" /> that represents this instance.
            </para></summary>
      <param name="formatProvider">格式提供程序。<para>原文：The format provider.</para></param>
      <returns>表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that represents this instance.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)" tran:state="Complete">
      <summary>返回表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            Returns a <see cref="T:System.String" /> that represents this instance.
            </para></summary>
      <param name="format">格式。<para>原文：The format.</para></param>
      <param name="formatProvider">格式提供程序。<para>原文：The format provider.</para></param>
      <returns>表示此实例的 <see cref="T:System.String" /> 。<para>原文：
            A <see cref="T:System.String" /> that represents this instance.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)" tran:state="Complete">
      <summary>返回负责对该对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 。<para>原文：
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </para></summary>
      <param name="parameter">运行时值的表达式树表示形式。<para>原文：The expression tree representation of the runtime value.</para></param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 来绑定此对象。<para>原文：
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)" tran:state="Complete">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例是在排序顺序中位于另一个对象之前、之后还是发生在同一位置。<para>原文：
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </para></summary>
      <param name="obj">要与此实例进行比较的对象。<para>原文：An object to compare with this instance.</para></param>
      <returns>一个32位有符号整数，指示要比较的对象的相对顺序。返回值具有以下含义：值表示小于零此实例小于 <paramref name="obj" /> 。零此实例等于 <paramref name="obj" /> 。大于零此实例大于 <paramref name="obj" /> 。<para>原文：
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </para></returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 与此实例的类型不同。<para>原文：<paramref name="obj" /> is not the same type as this instance.
            </para></exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues" tran:state="Complete">
      <summary>获取一个值，该值指示此令牌是否具有子令牌。<para>原文：
            Gets a value indicating whether this token has child tokens.
            </para></summary>
      <value>
        <c>true</c>如果该标记具有子值；否则<c>false</c>.<para>原文：<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type" tran:state="Complete">
      <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的节点类型。<para>原文：
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para></summary>
      <value>类型。<para>原文：The type.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value" tran:state="Complete">
      <summary>获取或设置基础令牌值。<para>原文：
            Gets or sets the underlying token value.
            </para></summary>
      <value>基础标记值。<para>原文：The underlying token value.</para></value>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)" tran:state="Complete">
      <summary>从另一个 <see cref="T:Newtonsoft.Json.Linq.JRaw" /> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JRaw" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </para></summary>
      <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JRaw" /> 对象。<para>原文：A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JRaw" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </para></summary>
      <param name="rawJson">原始json。<para>原文：The raw json.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>使用读取器当前标记的内容创建 <see cref="T:Newtonsoft.Json.Linq.JRaw" /> 的实例。<para>原文：
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </para></summary>
      <param name="reader">读者。<para>原文：The reader.</para></param>
      <returns>包含读取器当前标记内容的 <see cref="T:Newtonsoft.Json.Linq.JRaw" /> 实例。<para>原文：An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Required" tran:state="Complete">
      <summary>指示是否需要属性。<para>原文：
            Indicating whether a property is required.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default" tran:state="Complete">
      <summary>该属性不是必需的。默认状态。<para>原文：
            The property is not required. The default state.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull" tran:state="Complete">
      <summary>属性必须在JSON中定义，但可以是空值。<para>原文：
            The property must be defined in JSON but can be a null value.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always" tran:state="Complete">
      <summary>属性必须在JSON中定义，不能为空值。<para>原文：
            The property must be defined in JSON and cannot be a null value.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties" tran:state="Complete">
      <summary>获取对象的属性。<para>原文：
            Gets the object's properties.
            </para></summary>
      <value>对象的属性。<para>原文：The object's properties.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver" tran:state="Complete">
      <summary>获取或设置属性名解析程序。<para>原文：
            Gets or sets the property name resolver.
            </para></summary>
      <value>属性名解析程序。<para>原文：The property name resolver.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator" tran:state="Complete">
      <summary>获取或设置ISerializable对象构造函数。<para>原文：
            Gets or sets the ISerializable object constructor.
            </para></summary>
      <value>ISerializable对象构造函数。<para>原文：The ISerializable object constructor.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider" tran:state="Complete">
      <summary>使用动态方法获取并设置a <see cref="T:System.Reflection.MemberInfo" /> 的值。<para>原文：
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </para></summary>
      <param name="memberInfo">会员信息。<para>原文：The member info.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)" tran:state="Complete">
      <summary>设置值。<para>原文：
            Sets the value.
            </para></summary>
      <param name="target">要设置值的目标。<para>原文：The target to set the value on.</para></param>
      <param name="value">要在目标上设置的值。<para>原文：The value to set on the target.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)" tran:state="Complete">
      <summary>获取值。<para>原文：
            Gets the value.
            </para></summary>
      <param name="target">要从中获取值的目标。<para>原文：The target to get the value from.</para></param>
      <returns>价值。<para>原文：The value.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs" tran:state="Complete">
      <summary>提供错误事件的数据。<para>原文：
            Provides data for the Error event.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </para></summary>
      <param name="currentObject">当前对象。<para>原文：The current object.</para></param>
      <param name="errorContext">错误上下文。<para>原文：The error context.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject" tran:state="Complete">
      <summary>获取引发错误事件的当前对象。<para>原文：
            Gets the current object the error event is being raised against.
            </para></summary>
      <value>引发错误事件所针对的当前对象。<para>原文：The current object the error event is being raised against.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext" tran:state="Complete">
      <summary>获取错误上下文。<para>原文：
            Gets the error context.
            </para></summary>
      <value>错误上下文。<para>原文：The error context.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor" tran:state="Complete">
      <summary>表示 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 的视图。<para>原文：
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </para></summary>
      <param name="name">名字。<para>原文：The name.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)" tran:state="Complete">
      <summary>在派生类中重写时，返回重置对象是否会更改其值。<para>原文：
            When overridden in a derived class, returns whether resetting an object changes its value.
            </para></summary>
      <returns>如果重置组件会改变其值，则为true；否则就错了。<para>原文：
            true if resetting the component changes its value; otherwise, false.
            </para></returns>
      <param name="component">要测试重置能力的组件。<para>原文：The component to test for reset capability. 
                            </para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)" tran:state="Complete">
      <summary>在派生类中重写时，获取组件上属性的当前值。<para>原文：
            When overridden in a derived class, gets the current value of the property on a component.
            </para></summary>
      <returns>给定组件的属性值。<para>原文：
            The value of a property for a given component.
            </para></returns>
      <param name="component">具有要检索其值的属性的组件。<para>原文：The component with the property for which to retrieve the value. 
                            </para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)" tran:state="Complete">
      <summary>在派生类中重写时，将组件的此属性的值重置为默认值。<para>原文：
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </para></summary>
      <param name="component">具有要重置为默认值的特性值的组件。<para>原文：The component with the property value that is to be reset to the default value. 
                            </para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)" tran:state="Complete">
      <summary>在派生类中重写时，将组件的值设置为其他值。<para>原文：
            When overridden in a derived class, sets the value of the component to a different value.
            </para></summary>
      <param name="component">具有要设置的属性值的组件。<para>原文：The component with the property value that is to be set. 
                            </para></param>
      <param name="value">新的价值观。<para>原文：The new value. 
                            </para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)" tran:state="Complete">
      <summary>在派生类中重写时，确定一个值，该值指示是否需要持久化此属性的值。<para>原文：
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </para></summary>
      <returns>如果应该保留该属性，则为true；否则就错了。<para>原文：
            true if the property should be persisted; otherwise, false.
            </para></returns>
      <param name="component">具有要检查持久性的属性的组件。<para>原文：The component with the property to be examined for persistence. 
                            </para></param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType" tran:state="Complete">
      <summary>在派生类中重写时，获取此属性绑定到的组件的类型。<para>原文：
            When overridden in a derived class, gets the type of the component this property is bound to.
            </para></summary>
      <returns>表示此属性绑定到的组件类型的 <see cref="T:System.Type" /> 。调用 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法时，指定的对象可能是这种类型的实例。<para>原文：
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly" tran:state="Complete">
      <summary>在派生类中重写时，获取一个值，该值指示此属性是否为只读。<para>原文：
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </para></summary>
      <returns>如果属性为只读，则为true；否则就错了。<para>原文：
            true if the property is read-only; otherwise, false.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType" tran:state="Complete">
      <summary>在派生类中重写时，获取属性的类型。<para>原文：
            When overridden in a derived class, gets the type of the property.
            </para></summary>
      <returns>表示属性类型的 <see cref="T:System.Type" /> 。<para>原文：
            A <see cref="T:System.Type" /> that represents the type of the property.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode" tran:state="Complete">
      <summary>获取成员名称的哈希代码。<para>原文：
            Gets the hash code for the name of the member.
            </para></summary>
      <value></value>
      <returns>成员名称的哈希代码。<para>原文：
            The hash code for the name of the member.
            </para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver" tran:state="Complete">
      <summary>用于在通过 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 序列化和反序列化JSON时解析引用。<para>原文：
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)" tran:state="Complete">
      <summary>解析对其对象的引用。<para>原文：
            Resolves a reference to its object.
            </para></summary>
      <param name="context">序列化上下文。<para>原文：The serialization context.</para></param>
      <param name="reference">要解决的引用。<para>原文：The reference to resolve.</para></param>
      <returns>这个物体<para>原文：The object that</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)" tran:state="Complete">
      <summary>获取单独指定对象的引用。<para>原文：
            Gets the reference for the sepecified object.
            </para></summary>
      <param name="context">序列化上下文。<para>原文：The serialization context.</para></param>
      <param name="value">要获取引用的对象。<para>原文：The object to get a reference for.</para></param>
      <returns>对对象的引用。<para>原文：The reference to the object.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)" tran:state="Complete">
      <summary>确定是否引用指定的对象。<para>原文：
            Determines whether the specified object is referenced.
            </para></summary>
      <param name="context">序列化上下文。<para>原文：The serialization context.</para></param>
      <param name="value">用于测试引用的对象。<para>原文：The object to test for a reference.</para></param>
      <returns>
        <c>true</c>如果指定的对象被引用；否则<c>false</c>.<para>原文：<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)" tran:state="Complete">
      <summary>添加对指定对象的引用。<para>原文：
            Adds a reference to the specified object.
            </para></summary>
      <param name="context">序列化上下文。<para>原文：The serialization context.</para></param>
      <param name="reference">参考资料。<para>原文：The reference.</para></param>
      <param name="value">要引用的对象。<para>原文：The object to reference.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的引用处理选项。请注意，当通过非默认构造函数（如实现ISerializable的类型）设置值时，无法保留引用。<para>原文：
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </para></summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" /></para>
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None" tran:state="Complete">
      <summary>序列化类型时不要保留引用。<para>原文：
            Do not preserve references when serializing types.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects" tran:state="Complete">
      <summary>序列化为JSON对象结构时保留引用。<para>原文：
            Preserve references when serializing into a JSON object structure.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays" tran:state="Complete">
      <summary>序列化为JSON数组结构时保留引用。<para>原文：
            Preserve references when serializing into a JSON array structure.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All" tran:state="Complete">
      <summary>序列化时保留引用。<para>原文：
            Preserve references when serializing.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 如何序列化集合。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)" tran:state="Complete">
      <summary>使用指示数组是否可以包含空项的标志初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> 类的新实例<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </para></summary>
      <param name="allowNullItems">指示数组是否可以包含空项的标志。<para>原文：A flag indicating whether the array can contain null items.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)" tran:state="Complete">
      <summary>用指定的容器Id初始化 <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </para></summary>
      <param name="id">容器Id。<para>原文：The container Id.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems" tran:state="Complete">
      <summary>获取或设置一个值，该值指示集合中是否允许空项。<para>原文：
            Gets or sets a value indicating whether null items are allowed in the collection.
            </para></summary>
      <value>
        <c>true</c>集合中是否允许空项；否则<c>false</c>.<para>原文：<c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的默认值处理选项。<para>原文：
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" /><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" /></para>
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include" tran:state="Complete">
      <summary>包括序列化对象时成员值与成员默认值相同的成员。包含的成员被写入JSON。反序列化时无效。<para>原文：
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore" tran:state="Complete">
      <summary>在序列化对象时忽略成员值与成员默认值相同的成员，这样就不会写入JSON。此选项将忽略所有默认值（例如。<c>null</c>用于对象和可空类型；<c>0</c>对于整数、小数和浮点数；和<c>false</c>适用于布尔人）。可以通过在属性上放置 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 来更改忽略的默认值。<para>原文：
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate" tran:state="Complete">
      <summary>反序列化时，具有默认值但没有JSON的成员将被设置为其默认值。<para>原文：
            Members with a default value but no JSON will be set to their default value when deserializing.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate" tran:state="Complete">
      <summary>在序列化对象时忽略成员值与成员默认值相同的成员，并在反序列化时将成员设置为其默认值。<para>原文：
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 在序列化成员或类时使用指定的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </para></summary>
      <param name="converterType">转换器的类型。<para>原文：Type of the converter.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType" tran:state="Complete">
      <summary>获取转换器的类型。<para>原文：
            Gets the type of the converter.
            </para></summary>
      <value>转换器的类型。<para>原文：The type of the converter.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 如何序列化对象。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)" tran:state="Complete">
      <summary>使用指定的成员序列化初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </para></summary>
      <param name="memberSerialization">成员序列化。<para>原文：The member serialization.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)" tran:state="Complete">
      <summary>用指定的容器Id初始化 <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </para></summary>
      <param name="id">容器Id。<para>原文：The container Id.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization" tran:state="Complete">
      <summary>获取或设置成员序列化。<para>原文：
            Gets or sets the member serialization.
            </para></summary>
      <value>成员序列化。<para>原文：The member serialization.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否需要对象的属性。<para>原文：
            Gets or sets a value that indicates whether the object's properties are required.
            </para></summary>
      <value>一个值，指示是否需要对象的属性。<para>原文：
            	A value indicating whether the object's properties are required.
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 对象上的设置。<para>原文：
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置如何处理引用循环（例如，类引用自身）。<para>原文：
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </para></summary>
      <value>参考循环处理。<para>原文：Reference loop handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling" tran:state="Complete">
      <summary>获取或设置在反序列化过程中如何处理缺少的成员（例如，JSON包含的属性不是对象上的成员）。<para>原文：
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </para></summary>
      <value>缺少成员处理。<para>原文：Missing member handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling" tran:state="Complete">
      <summary>获取或设置在反序列化过程中创建对象的方式。<para>原文：
            Gets or sets how objects are created during deserialization.
            </para></summary>
      <value>对象创建处理。<para>原文：The object creation handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling" tran:state="Complete">
      <summary>获取或设置在序列化和反序列化期间处理空值的方式。<para>原文：
            Gets or sets how null values are handled during serialization and deserialization.
            </para></summary>
      <value>空值处理。<para>原文：Null value handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling" tran:state="Complete">
      <summary>获取或设置在序列化和反序列化期间如何处理空默认值。<para>原文：
            Gets or sets how null default are handled during serialization and deserialization.
            </para></summary>
      <value>默认值处理。<para>原文：The default value handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters" tran:state="Complete">
      <summary>获取或设置将在序列化期间使用的集合 <see cref="T:Newtonsoft.Json.JsonConverter" /> 。<para>原文：
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </para></summary>
      <value>转换器。<para>原文：The converters.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling" tran:state="Complete">
      <summary>获取或设置序列化程序保留对象引用的方式。<para>原文：
            Gets or sets how object references are preserved by the serializer.
            </para></summary>
      <value>保存引用处理。<para>原文：The preserve references handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling" tran:state="Complete">
      <summary>获取或设置序列化程序处理类型名写入和读取的方式。<para>原文：
            Gets or sets how type name writing and reading is handled by the serializer.
            </para></summary>
      <value>类型名称处理。<para>原文：The type name handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling" tran:state="Complete">
      <summary>获取或设置反序列化期间元数据属性的使用方式。<para>原文：
            Gets or sets how metadata properties are used during deserialization.
            </para></summary>
      <value>元数据属性处理。<para>原文：The metadata properties handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat" tran:state="Complete">
      <summary>获取或设置序列化程序写入和解析类型名程序集的方式。<para>原文：
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </para></summary>
      <value>类型名是程序集格式。<para>原文：The type name assembly format.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling" tran:state="Complete">
      <summary>获取或设置在反序列化期间如何使用构造函数。<para>原文：
            Gets or sets how constructors are used during deserialization.
            </para></summary>
      <value>构造函数正在处理。<para>原文：The constructor handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver" tran:state="Complete">
      <summary>获取或设置序列化程序在序列化时使用的协定解析程序。NET对象转换为JSON，反之亦然。<para>原文：
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </para></summary>
      <value>合同解决者。<para>原文：The contract resolver.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver" tran:state="Complete">
      <summary>获取或设置序列化程序在解析引用时使用的 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> 。<para>原文：
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </para></summary>
      <value>参考解析器。<para>原文：The reference resolver.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter" tran:state="Complete">
      <summary>获取或设置序列化程序在写入跟踪消息时使用的 <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> 。<para>原文：
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </para></summary>
      <value>追踪器。<para>原文：The trace writer.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder" tran:state="Complete">
      <summary>获取或设置序列化程序在解析类型名时使用的 <see cref="T:System.Runtime.Serialization.SerializationBinder" /> 。<para>原文：
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </para></summary>
      <value>活页夹。<para>原文：The binder.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error" tran:state="Complete">
      <summary>获取或设置在序列化和反序列化期间调用的错误处理程序。<para>原文：
            Gets or sets the error handler called during serialization and deserialization.
            </para></summary>
      <value>序列化和反序列化期间调用的错误处理程序。<para>原文：The error handler called during serialization and deserialization.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context" tran:state="Complete">
      <summary>获取或设置序列化程序在调用序列化回调方法时使用的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 。<para>原文：
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </para></summary>
      <value>背景。<para>原文：The context.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString" tran:state="Complete">
      <summary>获取或设置写入JSON文本时 <see cref="T:System.DateTime" /> 和 <see cref="T:System.DateTimeOffset" /> 值的格式设置。<para>原文：
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth" tran:state="Complete">
      <summary>获取或设置读取JSON时允许的最大深度。阅读超过此深度将抛出一个 <see cref="T:Newtonsoft.Json.JsonReaderException" /> 。<para>原文：
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting" tran:state="Complete">
      <summary>指示JSON文本输出的格式。<para>原文：
            Indicates how JSON text output is formatted.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling" tran:state="Complete">
      <summary>获取或设置如何将日期写入JSON文本。<para>原文：
            Get or set how dates are written to JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling" tran:state="Complete">
      <summary>获取或设置 <see cref="T:System.DateTime" /> 时区在序列化和反序列化期间的处理方式。<para>原文：
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling" tran:state="Complete">
      <summary>获取或设置读取JSON时如何解析日期格式的字符串，例如“\/date（1198908717056）\/”和“2012-03-21T05:40Z”。<para>原文：
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling" tran:state="Complete">
      <summary>获取或设置特殊浮点数，例如 <see cref="F:System.Double.NaN" /> 、 <see cref="F:System.Double.PositiveInfinity" /> 和 <see cref="F:System.Double.NegativeInfinity" /> 如何写入JSON。<para>原文：
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling" tran:state="Complete">
      <summary>获取或设置读取JSON文本时如何解析浮点数，例如1.0和9.9。<para>原文：
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling" tran:state="Complete">
      <summary>获取或设置在编写JSON文本时如何转义字符串。<para>原文：
            Get or set how strings are escaped when writing JSON text.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture" tran:state="Complete">
      <summary>获取或设置读取JSON时使用的区域性。默认值为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 。<para>原文：
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent" tran:state="Complete">
      <summary>获取一个值，该值指示在反序列化对象后是否检查其他内容。<para>原文：
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </para></summary>
      <value>
        <c>true</c>反序列化对象后是否会检查其他内容；否则<c>false</c>.<para>原文：<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader" tran:state="Complete">
      <summary>表示提供验证的读取器。<para>原文：
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>初始化类的新实例，该类验证从给定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 返回的内容。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </para></summary>
      <param name="reader">验证时要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。<para>原文：A <see cref="T:System.Nullable`1" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:Byte[]" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </para></summary>
      <returns>如果下一个JSON标记为null，则为 <see cref="T:Byte[]" /> 或null引用。<para>原文：
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。<para>原文：A <see cref="T:System.Nullable`1" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.String" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。<para>原文：A <see cref="T:System.Nullable`1" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read" tran:state="Complete">
      <summary>从流中读取下一个JSON标记。<para>原文：
            Reads the next JSON token from the stream.
            </para></summary>
      <returns>如果成功读取下一个令牌，则为true；如果没有更多令牌可读取，则为false。<para>原文：
            true if the next token was read successfully; false if there are no more tokens to read.
            </para></returns>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler" tran:state="Complete">
      <summary>设置用于接收架构验证错误的事件处理程序。<para>原文：
            Sets an event handler for receiving schema validation errors.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value" tran:state="Complete">
      <summary>获取当前JSON标记的文本值。<para>原文：
            Gets the text value of the current JSON token.
            </para></summary>
      <value></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth" tran:state="Complete">
      <summary>获取JSON文档中当前标记的深度。<para>原文：
            Gets the depth of the current token in the JSON document.
            </para></summary>
      <value>JSON文档中当前标记的深度。<para>原文：The depth of the current token in the JSON document.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path" tran:state="Complete">
      <summary>获取当前JSON令牌的路径。<para>原文：
            Gets the path of the current JSON token. 
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar" tran:state="Complete">
      <summary>获取用于括起字符串值的引号字符。<para>原文：
            Gets the quotation mark character used to enclose the value of a string.
            </para></summary>
      <value></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType" tran:state="Complete">
      <summary>获取当前JSON令牌的类型。<para>原文：
            Gets the type of the current JSON token.
            </para></summary>
      <value></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType" tran:state="Complete">
      <summary>获取当前JSON令牌的公共语言运行时（CLR）类型。<para>原文：
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </para></summary>
      <value></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema" tran:state="Complete">
      <summary>获取或设置架构。<para>原文：
            Gets or sets the schema.
            </para></summary>
      <value>模式。<para>原文：The schema.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader" tran:state="Complete">
      <summary>获取用于构造此 <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> 的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </para></summary>
      <value>构造函数中指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" tran:state="Complete">
      <summary>比较标记以确定它们是否相等。<para>原文：
            Compares tokens to determine whether they are equal.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>确定指定的对象是否相等。<para>原文：
            Determines whether the specified objects are equal.
            </para></summary>
      <param name="x">要比较的第一个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 类型的对象。<para>原文：The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</para></param>
      <param name="y">要比较的第二个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 类型的对象。<para>原文：The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</para></param>
      <returns>如果指定的对象相等，则为true；否则就错了。<para>原文：
            true if the specified objects are equal; otherwise, false.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>返回指定对象的哈希代码。<para>原文：
            Returns a hash code for the specified object.
            </para></summary>
      <param name="obj">要为其返回哈希代码的 <see cref="T:System.Object" /> 。<para>原文：The <see cref="T:System.Object" /> for which a hash code is to be returned.</para></param>
      <returns>指定对象的哈希代码。<para>原文：A hash code for the specified object.</para></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型是引用类型， <paramref name="obj" /> 的类型为空。<para>原文：The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</para></exception>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的成员序列化选项。<para>原文：
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut" tran:state="Complete">
      <summary>默认情况下，所有公共成员都是序列化的。可以使用 <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> 或 <see cref="T:System.NonSerializedAttribute" /> 排除成员。这是默认的成员序列化模式。<para>原文：
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn" tran:state="Complete">
      <summary>只有成员必须标有 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> 或 <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> 才能序列化。还可以通过将类标记为 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 来设置此成员序列化模式。<para>原文：
            Only members must be marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields" tran:state="Complete">
      <summary>所有公共和私有字段都被序列化。可以使用 <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> 或 <see cref="T:System.NonSerializedAttribute" /> 排除成员。还可以通过将类标记为 <see cref="T:System.SerializableAttribute" /> 并将 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> 上的IgnoreSerializableAttribute设置为false来设置此成员序列化模式。<para>原文：
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 如何处理对象创建。<para>原文：
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto" tran:state="Complete">
      <summary>重用现有对象，必要时创建新对象。<para>原文：
            Reuse existing objects, create new objects when needed.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse" tran:state="Complete">
      <summary>仅重用现有对象。<para>原文：
            Only reuse existing objects.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace" tran:state="Complete">
      <summary>始终创建新对象。<para>原文：
            Always create new objects.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter" tran:state="Complete">
      <summary>将 <see cref="T:System.DateTime" /> 转换为ISO 8601日期格式（例如2008-04-12T12:53Z）。<para>原文：
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles" tran:state="Complete">
      <summary>获取或设置在将日期转换为JSON或从JSON转换为日期时使用的日期时间样式。<para>原文：
            Gets or sets the date time styles used when converting a date to and from JSON.
            </para></summary>
      <value>将日期与JSON进行转换时使用的日期时间样式。<para>原文：The date time styles used when converting a date to and from JSON.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat" tran:state="Complete">
      <summary>获取或设置在将日期转换为JSON或从JSON转换为日期时使用的日期时间格式。<para>原文：
            Gets or sets the date time format used when converting a date to and from JSON.
            </para></summary>
      <value>在将日期与JSON进行转换时使用的日期时间格式。<para>原文：The date time format used when converting a date to and from JSON.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture" tran:state="Complete">
      <summary>获取或设置在将日期转换为JSON或从JSON转换为日期时使用的区域性。<para>原文：
            Gets or sets the culture used when converting a date to and from JSON.
            </para></summary>
      <value>将日期转换为JSON和JSON时使用的区域性。<para>原文：The culture used when converting a date to and from JSON.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter" tran:state="Complete">
      <summary>将 <see cref="T:System.DateTime" /> 转换为JavaScript日期构造函数（例如新日期（52231943））。<para>原文：
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在转换的JSON的现有属性值。<para>原文：The existing property value of the JSON that is being converted.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter" tran:state="Complete">
      <summary>将XML与JSON进行转换。<para>原文：
            Converts XML to and from JSON.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>写入对象的JSON表示形式。<para>原文：
            Writes the JSON representation of the object.
            </para></summary>
      <param name="writer">要写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>读取对象的JSON表示形式。<para>原文：
            Reads the JSON representation of the object.
            </para></summary>
      <param name="reader">要从中读取的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</para></param>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <param name="existingValue">正在读取的对象的现有值。<para>原文：The existing value of object being read.</para></param>
      <param name="serializer">调用序列化程序。<para>原文：The calling serializer.</para></param>
      <returns>对象值。<para>原文：The object value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)" tran:state="Complete">
      <summary>检查attributeName是否为命名空间属性。<para>原文：
            Checks if the attributeName is a namespace attribute.
            </para></summary>
      <param name="attributeName">要测试的属性名称。<para>原文：Attribute name to test.</para></param>
      <param name="prefix">属性名称前缀（如果有），否则为空字符串。<para>原文：The attribute name prefix if it has one, otherwise an empty string.</para></param>
      <returns>如果属性名称用于命名空间属性，则为True，否则为false。<para>原文：True if attribute name is for a namespace attribute, otherwise false.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)" tran:state="Complete">
      <summary>确定此实例是否可以转换指定的值类型。<para>原文：
            Determines whether this instance can convert the specified value type.
            </para></summary>
      <param name="valueType">值的类型。<para>原文：Type of the value.</para></param>
      <returns>
        <c>true</c>如果该实例可以转换指定的值类型；否则<c>false</c>.<para>原文：<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName" tran:state="Complete">
      <summary>获取或设置在反序列化为XML时要插入的根元素的名称（如果JSON结构已生成多个根元素）。<para>原文：
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </para></summary>
      <value>反序列化根元素的名称。<para>原文：The name of the deserialize root element.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute" tran:state="Complete">
      <summary>获取或设置一个标志，以指示是否写入Json。NET数组属性。当将写入的XML转换回JSON时，此属性有助于保留数组。<para>原文：
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </para></summary>
      <value>
        <c>true</c>如果数组attibute被写入XML；否则<c>false</c>.<para>原文：<c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否写入根JSON对象。<para>原文：
            Gets or sets a value indicating whether to write the root JSON object.
            </para></summary>
      <value>
        <c>true</c>如果省略了JSON根对象；否则<c>false</c>.<para>原文：<c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader" tran:state="Complete">
      <summary>表示提供对JSON文本数据的快速、非缓存、仅转发访问的读取器。<para>原文：
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)" tran:state="Complete">
      <summary>用指定的 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:Newtonsoft.Json.JsonReader" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </para></summary>
      <param name="reader">这个<c>TextReader</c>包含要读取的XML数据。<para>原文：The <c>TextReader</c> containing the XML data to read.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read" tran:state="Complete">
      <summary>从流中读取下一个JSON标记。<para>原文：
            Reads the next JSON token from the stream.
            </para></summary>
      <returns>如果成功读取下一个令牌，则为true；如果没有更多令牌可读取，则为false。<para>原文：
            true if the next token was read successfully; false if there are no more tokens to read.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:Byte[]" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </para></summary>
      <returns>如果下一个JSON标记为null，则为 <see cref="T:Byte[]" /> 或null引用。此方法将返回<c>null</c>在数组的末尾。<para>原文：
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.String" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </para></summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：A <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close" tran:state="Complete">
      <summary>将状态更改为“已关闭”。<para>原文：
            Changes the state to closed. 
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo" tran:state="Complete">
      <summary>获取一个值，该值指示类是否可以返回行信息。<para>原文：
            Gets a value indicating whether the class can return line information.
            </para></summary>
      <returns>
        <c>true</c>是否可以提供行号和行号位置；否则<c>false</c>.<para>原文：<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </para></returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber" tran:state="Complete">
      <summary>获取当前行号。<para>原文：
            Gets the current line number.
            </para></summary>
      <value>当前行号，如果没有可用的行信息，则为0（例如，HasLineInfo返回false）。<para>原文：
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition" tran:state="Complete">
      <summary>获取当前行位置。<para>原文：
            Gets the current line position.
            </para></summary>
      <value>当前行位置或0（如果没有行信息可用）（例如，HasLineInfo返回false）。<para>原文：
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 始终使用指定的名称序列化成员。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)" tran:state="Complete">
      <summary>用指定的名称初始化 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType" tran:state="Complete">
      <summary>获取或设置序列化属性集合项时使用的转换器。<para>原文：
            Gets or sets the converter used when serializing the property's collection items.
            </para></summary>
      <value>集合的项目转换器。<para>原文：The collection's items converter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling" tran:state="Complete">
      <summary>获取或设置序列化此属性时使用的空值处理。<para>原文：
            Gets or sets the null value handling used when serializing this property.
            </para></summary>
      <value>空值处理。<para>原文：The null value handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling" tran:state="Complete">
      <summary>获取或设置序列化此属性时使用的默认值处理。<para>原文：
            Gets or sets the default value handling used when serializing this property.
            </para></summary>
      <value>默认值处理。<para>原文：The default value handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置序列化此属性时使用的引用循环处理。<para>原文：
            Gets or sets the reference loop handling used when serializing this property.
            </para></summary>
      <value>参考循环处理。<para>原文：The reference loop handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling" tran:state="Complete">
      <summary>获取或设置反序列化此属性时使用的对象创建处理。<para>原文：
            Gets or sets the object creation handling used when deserializing this property.
            </para></summary>
      <value>对象创建处理。<para>原文：The object creation handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling" tran:state="Complete">
      <summary>获取或设置序列化此属性时使用的类型名称处理。<para>原文：
            Gets or sets the type name handling used when serializing this property.
            </para></summary>
      <value>类型名称处理。<para>原文：The type name handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference" tran:state="Complete">
      <summary>获取或设置此属性的值是否序列化为引用。<para>原文：
            Gets or sets whether this property's value is serialized as a reference.
            </para></summary>
      <value>此属性的值是否序列化为引用。<para>原文：Whether this property's value is serialized as a reference.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order" tran:state="Complete">
      <summary>获取或设置成员的序列化和反序列化顺序。<para>原文：
            Gets or sets the order of serialization and deserialization of a member.
            </para></summary>
      <value>序列化或反序列化的数字顺序。<para>原文：The numeric order of serialization or deserialization.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否需要此属性。<para>原文：
            Gets or sets a value indicating whether this property is required.
            </para></summary>
      <value>一个值，指示是否需要此属性。<para>原文：
            	A value indicating whether this property is required.
            </para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName" tran:state="Complete">
      <summary>获取或设置属性的名称。<para>原文：
            Gets or sets the name of the property.
            </para></summary>
      <value>财产的名称。<para>原文：The name of the property.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置序列化属性集合项时使用的引用循环处理。<para>原文：
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </para></summary>
      <value>集合的项引用循环处理。<para>原文：The collection's items reference loop handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling" tran:state="Complete">
      <summary>获取或设置序列化属性集合项时使用的类型名称处理。<para>原文：
            Gets or sets the the type name handling used when serializing the property's collection items.
            </para></summary>
      <value>集合的项类型名称处理。<para>原文：The collection's items type name handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference" tran:state="Complete">
      <summary>获取或设置是否将此属性的集合项序列化为引用。<para>原文：
            Gets or sets whether this property's collection items are serialized as a reference.
            </para></summary>
      <value>是否将此属性的集合项序列化为引用。<para>原文：Whether this property's collection items are serialized as a reference.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute" tran:state="Complete">
      <summary>指示 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 不要序列化公共字段或公共读/写属性值。<para>原文：
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter" tran:state="Complete">
      <summary>表示一个writer，它提供了生成Json数据的快速、非缓存、仅向前的方法。<para>原文：
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)" tran:state="Complete">
      <summary>创建<c>JsonWriter</c>使用指定的 <see cref="T:System.IO.TextWriter" /> 初始化。<para>原文：
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </para></summary>
      <param name="textWriter">这个<c>TextWriter</c>写信给。<para>原文：The <c>TextWriter</c> to write to.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush" tran:state="Complete">
      <summary>将缓冲区中的任何内容刷新到基础流，同时也刷新基础流。<para>原文：
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close" tran:state="Complete">
      <summary>关闭此流和基础流。<para>原文：
            Closes this stream and the underlying stream.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject" tran:state="Complete">
      <summary>写入Json对象的开头。<para>原文：
            Writes the beginning of a Json object.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray" tran:state="Complete">
      <summary>写入Json数组的开头。<para>原文：
            Writes the beginning of a Json array.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)" tran:state="Complete">
      <summary>使用给定名称写入构造函数的开头。<para>原文：
            Writes the start of a constructor with the given name.
            </para></summary>
      <param name="name">构造函数的名称。<para>原文：The name of the constructor.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)" tran:state="Complete">
      <summary>写入指定的结束标记。<para>原文：
            Writes the specified end token.
            </para></summary>
      <param name="token">要写入的结束标记。<para>原文：The end token to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)" tran:state="Complete">
      <summary>在Json对象上写入名称/值对的属性名。<para>原文：
            Writes the property name of a name/value pair on a Json object.
            </para></summary>
      <param name="name">财产的名称。<para>原文：The name of the property.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)" tran:state="Complete">
      <summary>在JSON对象上写入名称/值对的属性名。<para>原文：
            Writes the property name of a name/value pair on a JSON object.
            </para></summary>
      <param name="name">财产的名称。<para>原文：The name of the property.</para></param>
      <param name="escape">一个标志，指示在将文本写入JSON属性名时是否应转义。<para>原文：A flag to indicate whether the text should be escaped when it is written as a JSON property name.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent" tran:state="Complete">
      <summary>写入缩进字符。<para>原文：
            Writes indent characters.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter" tran:state="Complete">
      <summary>写入JSON值分隔符。<para>原文：
            Writes the JSON value delimiter.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace" tran:state="Complete">
      <summary>写入缩进空格。<para>原文：
            Writes an indent space.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Object" /> 值。如果该值不能作为单个JSON标记写入，则会引发错误。<para>原文：
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Object" /> 值。<para>原文：The <see cref="T:System.Object" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull" tran:state="Complete">
      <summary>写入空值。<para>原文：
            Writes a null value.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined" tran:state="Complete">
      <summary>写入未定义的值。<para>原文：
            Writes an undefined value.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)" tran:state="Complete">
      <summary>编写原始JSON。<para>原文：
            Writes raw JSON.
            </para></summary>
      <param name="json">要编写的原始JSON。<para>原文：The raw JSON to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.String" /> 值。<para>原文：
            Writes a <see cref="T:System.String" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.String" /> 值。<para>原文：The <see cref="T:System.String" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int32" /> 值。<para>原文：
            Writes a <see cref="T:System.Int32" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int32" /> 值。<para>原文：The <see cref="T:System.Int32" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt32" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt32" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt32" /> 值。<para>原文：The <see cref="T:System.UInt32" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int64" /> 值。<para>原文：
            Writes a <see cref="T:System.Int64" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int64" /> 值。<para>原文：The <see cref="T:System.Int64" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt64" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt64" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt64" /> 值。<para>原文：The <see cref="T:System.UInt64" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Single" /> 值。<para>原文：
            Writes a <see cref="T:System.Single" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Single" /> 值。<para>原文：The <see cref="T:System.Single" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Double" /> 值。<para>原文：
            Writes a <see cref="T:System.Double" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Double" /> 值。<para>原文：The <see cref="T:System.Double" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Nullable`1" /> 值。<para>原文：
            Writes a <see cref="T:System.Nullable`1" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Nullable`1" /> 值。<para>原文：The <see cref="T:System.Nullable`1" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Boolean" /> 值。<para>原文：
            Writes a <see cref="T:System.Boolean" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Boolean" /> 值。<para>原文：The <see cref="T:System.Boolean" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int16" /> 值。<para>原文：
            Writes a <see cref="T:System.Int16" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Int16" /> 值。<para>原文：The <see cref="T:System.Int16" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt16" /> 值。<para>原文：
            Writes a <see cref="T:System.UInt16" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt16" /> 值。<para>原文：The <see cref="T:System.UInt16" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Char" /> 值。<para>原文：
            Writes a <see cref="T:System.Char" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Char" /> 值。<para>原文：The <see cref="T:System.Char" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Byte" /> 值。<para>原文：
            Writes a <see cref="T:System.Byte" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Byte" /> 值。<para>原文：The <see cref="T:System.Byte" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.SByte" /> 值。<para>原文：
            Writes a <see cref="T:System.SByte" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.SByte" /> 值。<para>原文：The <see cref="T:System.SByte" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Decimal" /> 值。<para>原文：
            Writes a <see cref="T:System.Decimal" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Decimal" /> 值。<para>原文：The <see cref="T:System.Decimal" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTime" /> 值。<para>原文：
            Writes a <see cref="T:System.DateTime" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTime" /> 值。<para>原文：The <see cref="T:System.DateTime" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])" tran:state="Complete">
      <summary>写入一个 <see cref="T:Byte[]" /> 值。<para>原文：
            Writes a <see cref="T:Byte[]" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:Byte[]" /> 值。<para>原文：The <see cref="T:Byte[]" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：The <see cref="T:System.DateTimeOffset" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Guid" /> 值。<para>原文：
            Writes a <see cref="T:System.Guid" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Guid" /> 值。<para>原文：The <see cref="T:System.Guid" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.TimeSpan" /> 值。<para>原文：
            Writes a <see cref="T:System.TimeSpan" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.TimeSpan" /> 值。<para>原文：The <see cref="T:System.TimeSpan" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Uri" /> 值。<para>原文：
            Writes a <see cref="T:System.Uri" /> value.
            </para></summary>
      <param name="value">要写入的 <see cref="T:System.Uri" /> 值。<para>原文：The <see cref="T:System.Uri" /> value to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)" tran:state="Complete">
      <summary>写评论<code>/*...*/</code>包含指定文本的。<para>原文：
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </para></summary>
      <param name="text">要放置在注释内的文本。<para>原文：Text to place inside the comment.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)" tran:state="Complete">
      <summary>写出给定的空白。<para>原文：
            Writes out the given white space.
            </para></summary>
      <param name="ws">空白字符的字符串。<para>原文：The string of white space characters.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation" tran:state="Complete">
      <summary>获取或设置当 <see cref="T:Newtonsoft.Json.Formatting" /> 设置为<c>Formatting.Indented</c>.<para>原文：
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar" tran:state="Complete">
      <summary>获取或设置用于引用属性值的字符。<para>原文：
            Gets or sets which character to use to quote attribute values.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar" tran:state="Complete">
      <summary>获取或设置当 <see cref="T:Newtonsoft.Json.Formatting" /> 设置为<c>Formatting.Indented</c>.<para>原文：
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName" tran:state="Complete">
      <summary>获取或设置一个值，该值指示对象名称是否用引号括起来。<para>原文：
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException" tran:state="Complete">
      <summary>读取Json文本时出错时引发的异常。<para>原文：
            The exception thrown when an error occurs while reading Json text.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonWriterException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)" tran:state="Complete">
      <summary>使用指定的错误消息初始化 <see cref="T:Newtonsoft.Json.JsonWriterException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)" tran:state="Complete">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用初始化 <see cref="T:Newtonsoft.Json.JsonWriterException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
      <param name="innerException">导致当前异常的异常，或者如果未指定内部异常，则为空引用（在Visual Basic中为Nothing）。<para>原文：The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonWriterException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </para></summary>
      <param name="info">保存有关抛出异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 。<para>原文：The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</para></param>
      <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 。<para>原文：The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</para></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为空。<para>原文：The <paramref name="info" /> parameter is null. </para></exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">类名为null或 <see cref="P:System.Exception.HResult" /> 为零（0）。<para>原文：The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </para></exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path" tran:state="Complete">
      <summary>获取发生错误的JSON的路径。<para>原文：
            Gets the path to the JSON where the error occurred.
            </para></summary>
      <value>发生错误的JSON的路径。<para>原文：The path to the JSON where the error occurred.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException" tran:state="Complete">
      <summary>读取Json文本时出错时引发的异常。<para>原文：
            The exception thrown when an error occurs while reading Json text.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonReaderException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)" tran:state="Complete">
      <summary>使用指定的错误消息初始化 <see cref="T:Newtonsoft.Json.JsonReaderException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)" tran:state="Complete">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用初始化 <see cref="T:Newtonsoft.Json.JsonReaderException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
      <param name="innerException">导致当前异常的异常，或者如果未指定内部异常，则为空引用（在Visual Basic中为Nothing）。<para>原文：The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonReaderException" /> 类的新实例。<para>原文：
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </para></summary>
      <param name="info">保存有关抛出异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 。<para>原文：The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</para></param>
      <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 。<para>原文：The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</para></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为空。<para>原文：The <paramref name="info" /> parameter is null. </para></exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">类名为null或 <see cref="P:System.Exception.HResult" /> 为零（0）。<para>原文：The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </para></exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber" tran:state="Complete">
      <summary>获取指示错误发生位置的行号。<para>原文：
            Gets the line number indicating where the error occurred.
            </para></summary>
      <value>指示错误发生位置的行号。<para>原文：The line number indicating where the error occurred.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition" tran:state="Complete">
      <summary>获取指示错误发生位置的行位置。<para>原文：
            Gets the line position indicating where the error occurred.
            </para></summary>
      <value>指示错误发生位置的行位置。<para>原文：The line position indicating where the error occurred.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path" tran:state="Complete">
      <summary>获取发生错误的JSON的路径。<para>原文：
            Gets the path to the JSON where the error occurred.
            </para></summary>
      <value>发生错误的JSON的路径。<para>原文：The path to the JSON where the error occurred.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection" tran:state="Complete">
      <summary>表示 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert" tran:state="Complete">
      <summary>提供在公共语言运行时类型和JSON类型之间转换的方法。<para>原文：
            Provides methods for converting between common language runtime types and JSON types.
            </para></summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" /></para>
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True" tran:state="Complete">
      <summary>将JavaScript的布尔值true表示为字符串。此字段是只读的。<para>原文：
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False" tran:state="Complete">
      <summary>将JavaScript的布尔值false表示为字符串。此字段是只读的。<para>原文：
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null" tran:state="Complete">
      <summary>将JavaScript的null表示为字符串。此字段是只读的。<para>原文：
            Represents JavaScript's null as a string. This field is read-only.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined" tran:state="Complete">
      <summary>将JavaScript的未定义表示为字符串。此字段是只读的。<para>原文：
            Represents JavaScript's undefined as a string. This field is read-only.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity" tran:state="Complete">
      <summary>将JavaScript的正无穷大表示为字符串。此字段是只读的。<para>原文：
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity" tran:state="Complete">
      <summary>将JavaScript的负无穷大表示为字符串。此字段是只读的。<para>原文：
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN" tran:state="Complete">
      <summary>将JavaScript的NaN表示为字符串。此字段是只读的。<para>原文：
            Represents JavaScript's NaN as a string. This field is read-only.
            </para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)" tran:state="Complete">
      <summary>将 <see cref="T:System.DateTime" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.DateTime" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.DateTime" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)" tran:state="Complete">
      <summary>使用指定的 <see cref="T:Newtonsoft.Json.DateFormatHandling" /> 将 <see cref="T:System.DateTime" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <param name="format">日期将转换为的格式。<para>原文：The format the date will be converted to.</para></param>
      <param name="timeZoneHandling">将日期转换为字符串时的时区处理。<para>原文：The time zone handling when the date is converted to a string.</para></param>
      <returns>
        <see cref="T:System.DateTime" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.DateTime" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)" tran:state="Complete">
      <summary>将 <see cref="T:System.DateTimeOffset" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)" tran:state="Complete">
      <summary>使用指定的 <see cref="T:Newtonsoft.Json.DateFormatHandling" /> 将 <see cref="T:System.DateTimeOffset" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <param name="format">日期将转换为的格式。<para>原文：The format the date will be converted to.</para></param>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)" tran:state="Complete">
      <summary>将 <see cref="T:System.Boolean" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Boolean" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Boolean" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)" tran:state="Complete">
      <summary>将 <see cref="T:System.Char" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Char" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Char" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)" tran:state="Complete">
      <summary>将 <see cref="T:System.Enum" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Enum" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Enum" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)" tran:state="Complete">
      <summary>将 <see cref="T:System.Int32" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Int32" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Int32" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)" tran:state="Complete">
      <summary>将 <see cref="T:System.Int16" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Int16" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Int16" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)" tran:state="Complete">
      <summary>将 <see cref="T:System.UInt16" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.UInt16" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.UInt16" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)" tran:state="Complete">
      <summary>将 <see cref="T:System.UInt32" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.UInt32" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.UInt32" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)" tran:state="Complete">
      <summary>将 <see cref="T:System.Int64" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Int64" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Int64" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)" tran:state="Complete">
      <summary>将 <see cref="T:System.UInt64" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.UInt64" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.UInt64" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)" tran:state="Complete">
      <summary>将 <see cref="T:System.Single" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Single" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Single" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)" tran:state="Complete">
      <summary>将 <see cref="T:System.Double" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Double" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Double" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)" tran:state="Complete">
      <summary>将 <see cref="T:System.Byte" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Byte" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Byte" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)" tran:state="Complete">
      <summary>将 <see cref="T:System.SByte" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.SByte" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.SByte" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)" tran:state="Complete">
      <summary>将 <see cref="T:System.Decimal" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.SByte" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.SByte" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)" tran:state="Complete">
      <summary>将 <see cref="T:System.Guid" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Guid" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Guid" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)" tran:state="Complete">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.TimeSpan" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.TimeSpan" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)" tran:state="Complete">
      <summary>将 <see cref="T:System.Uri" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Uri" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Uri" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)" tran:state="Complete">
      <summary>将 <see cref="T:System.String" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.String" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.String" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)" tran:state="Complete">
      <summary>将 <see cref="T:System.String" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <param name="delimiter">字符串分隔符字符。<para>原文：The string delimiter character.</para></param>
      <returns>
        <see cref="T:System.String" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.String" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)" tran:state="Complete">
      <summary>将 <see cref="T:System.Object" /> 转换为其JSON字符串表示形式。<para>原文：
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </para></summary>
      <param name="value">要转换的值。<para>原文：The value to convert.</para></param>
      <returns>
        <see cref="T:System.Object" /> 的JSON字符串表示形式。<para>原文：A JSON string representation of the <see cref="T:System.Object" />.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)" tran:state="Complete">
      <summary>将指定的对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：A JSON string representation of the object.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)" tran:state="Complete">
      <summary>使用格式将指定对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string using formatting.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：
            A JSON string representation of the object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>使用 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合将指定的对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="converters">序列化时使用的转换器集合。<para>原文：A collection converters used while serializing.</para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：A JSON string representation of the object.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>使用格式化和 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合将指定的对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <param name="converters">序列化时使用的转换器集合。<para>原文：A collection converters used while serializing.</para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：A JSON string representation of the object.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 将指定的对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="settings">用于序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：
            A JSON string representation of the object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用类型、格式和 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 将指定对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="settings">用于序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</para></param>
      <param name="type">正在序列化的值的类型。如果值的类型不匹配，则当 <see cref="T:Newtonsoft.Json.TypeNameHandling" /> 自动写出类型名称时，使用此参数。指定类型是可选的。<para>原文：
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：
            A JSON string representation of the object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用格式化和 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 将指定的对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <param name="settings">用于序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：
            A JSON string representation of the object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用类型、格式和 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 将指定对象序列化为JSON字符串。<para>原文：
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <param name="settings">用于序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</para></param>
      <param name="type">正在序列化的值的类型。如果值的类型不匹配，则当 <see cref="T:Newtonsoft.Json.TypeNameHandling" /> 自动写出类型名称时，使用此参数。指定类型是可选的。<para>原文：
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </para></param>
      <returns>对象的JSON字符串表示形式。<para>原文：
            A JSON string representation of the object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)" tran:state="Complete">
      <summary>将指定的对象异步序列化为JSON字符串。序列化将在新线程上进行。<para>原文：
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <returns>表示异步序列化操作的任务。价值<c>TResult</c>参数包含对象的JSON字符串表示形式。<para>原文：
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)" tran:state="Complete">
      <summary>使用格式将指定对象异步序列化为JSON字符串。序列化将在新线程上进行。<para>原文：使用格式将指定对象异步序列化为JSON字符串。序列化将在新线程上进行。<para>原文：
				Asynchronously serializes the specified object to a JSON string using formatting.
				Serialization will happen on a new thread.
			</para></para></summary>
      <param name="value">要序列化的对象。<para>原文：要序列化的对象。<para>原文：The object to serialize.</para></para></param>
      <param name="formatting">指示输出的格式。<para>原文：指示输出的格式。<para>原文：Indicates how the output is formatted.</para></para></param>
      <returns>表示异步序列化操作的任务。价值<c>TResult</c>参数包含对象的JSON字符串表示形式。<para>原文：
				A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用格式化和 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合将指定的对象异步序列化为JSON字符串。序列化将在新线程上进行。<para>原文：
				Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
				Serialization will happen on a new thread.
			</para></summary>
      <param name="value">要序列化的对象。<para>原文：The object to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <param name="settings">用于序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>表示异步序列化操作的任务。价值<c>TResult</c>参数包含对象的JSON字符串表示形式。<para>原文：
				A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)" tran:state="Complete">
      <summary>将JSON反序列化为。NET对象。<para>原文：
				Deserializes the JSON to a .NET object.
			</para></summary>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>将JSON反序列化为。NET对象使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。<para>原文：
				Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
			</para></summary>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)" tran:state="Complete">
      <summary>将JSON反序列化为指定的值。网络类型。<para>原文：
				Deserializes the JSON to the specified .NET type.
			</para></summary>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="type">正在反序列化的对象的 <see cref="T:System.Type" /> 。<para>原文：
				The <see cref="T:System.Type" /> of object being deserialized.
			</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)" tran:state="Complete">
      <summary>将JSON反序列化为指定的值。网络类型。<para>原文：
				Deserializes the JSON to the specified .NET type.
			</para></summary>
      <typeparam name="T">要反序列化到的对象的类型。<para>原文：The type of the object to deserialize to.</para></typeparam>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)" tran:state="Complete">
      <summary>将JSON反序列化为给定的匿名类型。<para>原文：
				Deserializes the JSON to the given anonymous type.
			</para></summary>
      <typeparam name="T">要反序列化的匿名类型。这不能传统地指定，必须从作为参数传递的匿名类型推断出来。<para>原文：
				The anonymous type to deserialize to. This can't be specified
				traditionally and must be infered from the anonymous type passed
				as a parameter.
			</para></typeparam>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="anonymousTypeObject">匿名类型对象。<para>原文：The anonymous type object.</para></param>
      <returns>JSON字符串中的反序列化匿名类型。<para>原文：The deserialized anonymous type from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 将JSON反序列化为给定的匿名类型。<para>原文：
				Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
			</para></summary>
      <typeparam name="T">要反序列化的匿名类型。这不能传统地指定，必须从作为参数传递的匿名类型推断出来。<para>原文：
				The anonymous type to deserialize to. This can't be specified
				traditionally and must be infered from the anonymous type passed
				as a parameter.
			</para></typeparam>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="anonymousTypeObject">匿名类型对象。<para>原文：The anonymous type object.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>JSON字符串中的反序列化匿名类型。<para>原文：The deserialized anonymous type from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将JSON反序列化为指定的值。NET类型使用 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：
				Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
			</para></summary>
      <typeparam name="T">要反序列化到的对象的类型。<para>原文：The type of the object to deserialize to.</para></typeparam>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="converters">反序列化时要使用的转换器。<para>原文：Converters to use while deserializing.</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>将JSON反序列化为指定的值。使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 的网络类型。<para>原文：
				Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
			</para></summary>
      <typeparam name="T">要反序列化到的对象的类型。<para>原文：The type of the object to deserialize to.</para></typeparam>
      <param name="value">要反序列化的对象。<para>原文：The object to deserialize.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将JSON反序列化为指定的值。NET类型使用 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：
				Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
			</para></summary>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="type">要反序列化的对象的类型。<para>原文：The type of the object to deserialize.</para></param>
      <param name="converters">反序列化时要使用的转换器。<para>原文：Converters to use while deserializing.</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>将JSON反序列化为指定的值。使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 的网络类型。<para>原文：
				Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
			</para></summary>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="type">要反序列化到的对象的类型。<para>原文：The type of the object to deserialize to.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>JSON字符串中的反序列化对象。<para>原文：The deserialized object from the JSON string.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)" tran:state="Complete">
      <summary>将JSON异步反序列化为指定的。网络类型。反序列化将在新线程上进行。<para>原文：
				Asynchronously deserializes the JSON to the specified .NET type.
				Deserialization will happen on a new thread.
			</para></summary>
      <typeparam name="T">要反序列化到的对象的类型。<para>原文：The type of the object to deserialize to.</para></typeparam>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <returns>表示异步反序列化操作的任务。价值<c>TResult</c>参数包含JSON字符串中的反序列化对象。<para>原文：
				A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>将JSON异步反序列化为指定的。使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 的网络类型。反序列化将在新线程上进行。<para>原文：
				Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
				Deserialization will happen on a new thread.
			</para></summary>
      <typeparam name="T">要反序列化到的对象的类型。<para>原文：The type of the object to deserialize to.</para></typeparam>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>表示异步反序列化操作的任务。价值<c>TResult</c>参数包含JSON字符串中的反序列化对象。<para>原文：
				A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)" tran:state="Complete">
      <summary>将JSON异步反序列化为指定的。网络类型。反序列化将在新线程上进行。<para>原文：
				Asynchronously deserializes the JSON to the specified .NET type.
				Deserialization will happen on a new thread.
			</para></summary>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <returns>表示异步反序列化操作的任务。价值<c>TResult</c>参数包含JSON字符串中的反序列化对象。<para>原文：
				A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>将JSON异步反序列化为指定的。使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 的网络类型。反序列化将在新线程上进行。<para>原文：
				Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
				Deserialization will happen on a new thread.
			</para></summary>
      <param name="value">要反序列化的JSON。<para>原文：The JSON to deserialize.</para></param>
      <param name="type">要反序列化到的对象的类型。<para>原文：The type of the object to deserialize to.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>表示异步反序列化操作的任务。价值<c>TResult</c>参数包含JSON字符串中的反序列化对象。<para>原文：
				A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)" tran:state="Complete">
      <summary>用JSON字符串中的值填充对象。<para>原文：
				Populates the object with values from the JSON string.
			</para></summary>
      <param name="value">要从中填充值的JSON。<para>原文：The JSON to populate values from.</para></param>
      <param name="target">要在其上填充值的目标对象。<para>原文：The target object to populate values onto.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 用JSON字符串中的值填充对象。<para>原文：
				Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
			</para></summary>
      <param name="value">要从中填充值的JSON。<para>原文：The JSON to populate values from.</para></param>
      <param name="target">要在其上填充值的目标对象。<para>原文：The target object to populate values onto.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 异步地使用JSON字符串中的值填充对象。<para>原文：
				Asynchronously populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
			</para></summary>
      <param name="value">要从中填充值的JSON。<para>原文：The JSON to populate values from.</para></param>
      <param name="target">要在其上填充值的目标对象。<para>原文：The target object to populate values onto.</para></param>
      <param name="settings">用于反序列化对象的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 。如果为空，将使用默认的序列化设置。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
				If this is null, default serialization settings will be used.
			</para></param>
      <returns>表示异步填充操作的任务。<para>原文：
				A task that represents the asynchronous populate operation.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)" tran:state="Complete">
      <summary>将XML节点序列化为JSON字符串。<para>原文：
				Serializes the XML node to a JSON string.
			</para></summary>
      <param name="node">要序列化的节点。<para>原文：The node to serialize.</para></param>
      <returns>XmlNode的JSON字符串。<para>原文：A JSON string of the XmlNode.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)" tran:state="Complete">
      <summary>使用格式将XML节点序列化为JSON字符串。<para>原文：
				Serializes the XML node to a JSON string using formatting.
			</para></summary>
      <param name="node">要序列化的节点。<para>原文：The node to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <returns>XmlNode的JSON字符串。<para>原文：A JSON string of the XmlNode.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)" tran:state="Complete">
      <summary>使用格式化将XML节点序列化为JSON字符串，如果 <paramref name="omitRootObject" /> 为<c>true</c>.<para>原文：
				Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
			</para></summary>
      <param name="node">要序列化的节点。<para>原文：The node to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <param name="omitRootObject">忽略写入根对象。<para>原文：Omits writing the root object.</para></param>
      <returns>XmlNode的JSON字符串。<para>原文：A JSON string of the XmlNode.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)" tran:state="Complete">
      <summary>从JSON字符串反序列化XmlNode。<para>原文：
				Deserializes the XmlNode from a JSON string.
			</para></summary>
      <param name="value">JSON字符串。<para>原文：The JSON string.</para></param>
      <returns>反序列化的XmlNode<para>原文：The deserialized XmlNode</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)" tran:state="Complete">
      <summary>从嵌套在 <paramref name="deserializeRootElementName" /> 指定的根元素中的JSON字符串反序列化XmlNode。<para>原文：
				Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
			</para></summary>
      <param name="value">JSON字符串。<para>原文：The JSON string.</para></param>
      <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。<para>原文：The name of the root element to append when deserializing.</para></param>
      <returns>反序列化的XmlNode<para>原文：The deserialized XmlNode</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)" tran:state="Complete">
      <summary>从嵌套在 <paramref name="deserializeRootElementName" /> 指定的根元素中的JSON字符串反序列化XmlNode，并写入。集合的NET数组属性。<para>原文：
				Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
				and writes a .NET array attribute for collections.
			</para></summary>
      <param name="value">JSON字符串。<para>原文：The JSON string.</para></param>
      <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。<para>原文：The name of the root element to append when deserializing.</para></param>
      <param name="writeArrayAttribute">指示是否写入Json的标志。NET数组属性。当将写入的XML转换回JSON时，此属性有助于保留数组。<para>原文：
				A flag to indicate whether to write the Json.NET array attribute.
				This attribute helps preserve arrays when converting the written XML back to JSON.
			</para></param>
      <returns>反序列化的XmlNode<para>原文：The deserialized XmlNode</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)" tran:state="Complete">
      <summary>将 <see cref="T:System.Xml.Linq.XNode" /> 序列化为JSON字符串。<para>原文：
				Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
			</para></summary>
      <param name="node">要转换为JSON的节点。<para>原文：The node to convert to JSON.</para></param>
      <returns>XNode的JSON字符串。<para>原文：A JSON string of the XNode.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)" tran:state="Complete">
      <summary>使用格式将 <see cref="T:System.Xml.Linq.XNode" /> 序列化为JSON字符串。<para>原文：
				Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
			</para></summary>
      <param name="node">要转换为JSON的节点。<para>原文：The node to convert to JSON.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <returns>XNode的JSON字符串。<para>原文：A JSON string of the XNode.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)" tran:state="Complete">
      <summary>使用格式化将 <see cref="T:System.Xml.Linq.XNode" /> 序列化为JSON字符串，如果 <paramref name="omitRootObject" /> 为<c>true</c>.<para>原文：
				Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
			</para></summary>
      <param name="node">要序列化的节点。<para>原文：The node to serialize.</para></param>
      <param name="formatting">指示输出的格式。<para>原文：Indicates how the output is formatted.</para></param>
      <param name="omitRootObject">忽略写入根对象。<para>原文：Omits writing the root object.</para></param>
      <returns>XNode的JSON字符串。<para>原文：A JSON string of the XNode.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)" tran:state="Complete">
      <summary>从JSON字符串反序列化 <see cref="T:System.Xml.Linq.XNode" /> 。<para>原文：
				Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
			</para></summary>
      <param name="value">JSON字符串。<para>原文：The JSON string.</para></param>
      <returns>反序列化的XNode<para>原文：The deserialized XNode</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)" tran:state="Complete">
      <summary>从嵌套在 <paramref name="deserializeRootElementName" /> 指定的根元素中的JSON字符串反序列化 <see cref="T:System.Xml.Linq.XNode" /> 。<para>原文：
				Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
			</para></summary>
      <param name="value">JSON字符串。<para>原文：The JSON string.</para></param>
      <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。<para>原文：The name of the root element to append when deserializing.</para></param>
      <returns>反序列化的XNode<para>原文：The deserialized XNode</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)" tran:state="Complete">
      <summary>从嵌套在 <paramref name="deserializeRootElementName" /> 指定的根元素中的JSON字符串反序列化 <see cref="T:System.Xml.Linq.XNode" /> ，并写入。集合的NET数组属性。<para>原文：
				Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
				and writes a .NET array attribute for collections.
			</para></summary>
      <param name="value">JSON字符串。<para>原文：The JSON string.</para></param>
      <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。<para>原文：The name of the root element to append when deserializing.</para></param>
      <param name="writeArrayAttribute">指示是否写入Json的标志。NET数组属性。当将写入的XML转换回JSON时，此属性有助于保留数组。<para>原文：
				A flag to indicate whether to write the Json.NET array attribute.
				This attribute helps preserve arrays when converting the written XML back to JSON.
			</para></param>
      <returns>反序列化的XNode<para>原文：The deserialized XNode</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings" tran:state="Complete">
      <summary>获取或设置创建默认值 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 的函数。默认设置由 <see cref="T:Newtonsoft.Json.JsonConvert" /> 上的序列化方法以及 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 上的 <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> 和 <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> 自动使用。要在不使用任何默认设置的情况下序列化，请使用 <see cref="M:Newtonsoft.Json.JsonSerializer.Create" /> 创建一个 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 。<para>原文：
				Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
				Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
				and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
				To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
				<see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException" tran:state="Complete">
      <summary>Json序列化或反序列化期间发生错误时引发的异常。<para>原文：
				The exception thrown when an error occurs during Json serialization or deserialization.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializationException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)" tran:state="Complete">
      <summary>使用指定的错误消息初始化 <see cref="T:Newtonsoft.Json.JsonSerializationException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
				with a specified error message.
			</para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)" tran:state="Complete">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用初始化 <see cref="T:Newtonsoft.Json.JsonSerializationException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
				with a specified error message and a reference to the inner exception that is the cause of this exception.
			</para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
      <param name="innerException">导致当前异常的异常，或者如果未指定内部异常，则为空引用（在Visual Basic中为Nothing）。<para>原文：The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializationException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
			</para></summary>
      <param name="info">保存有关抛出异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 。<para>原文：
				The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
			</para></param>
      <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 。<para>原文：
				The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
			</para></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为空。<para>原文：
				The <paramref name="info" /> parameter is null.
			</para></exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">类名为null或 <see cref="P:System.Exception.HResult" /> 为零（0）。<para>原文：
				The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
			</para></exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer" tran:state="Complete">
      <summary>在JSON格式中序列化和反序列化对象。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 允许您控制如何将对象编码为JSON。<para>原文：
				Serializes and deserializes objects into and from the JSON format.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create" tran:state="Complete">
      <summary>创建一个新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将不使用默认设置。<para>原文：
				Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
			</para></summary>
      <returns>一个新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将不使用默认设置。<para>原文：
				A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 创建新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将不使用默认设置。<para>原文：
				Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
			</para></summary>
      <param name="settings">要应用于 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的设置。<para>原文：
				The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></param>
      <returns>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 创建一个新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将不使用默认设置。<para>原文：
				A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault" tran:state="Complete">
      <summary>创建一个新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将使用默认设置。<para>原文：
				Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
			</para></summary>
      <returns>一个新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将使用默认设置。<para>原文：
				A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)" tran:state="Complete">
      <summary>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 创建新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将使用默认设置。<para>原文：
				Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
			</para></summary>
      <param name="settings">要应用于 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的设置。<para>原文：
				The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></param>
      <returns>使用指定的 <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> 创建一个新的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 实例。 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 将使用默认设置。<para>原文：
				A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)" tran:state="Complete">
      <summary>将JSON值填充到目标对象上。<para>原文：
				Populates the JSON values onto the target object.
			</para></summary>
      <param name="reader">包含从中读取值的JSON结构的 <see cref="T:System.IO.TextReader" /> 。<para>原文：
				The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.
			</para></param>
      <param name="target">要在其上填充值的目标对象。<para>原文：The target object to populate values onto.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)" tran:state="Complete">
      <summary>将JSON值填充到目标对象上。<para>原文：
				Populates the JSON values onto the target object.
			</para></summary>
      <param name="reader">包含从中读取值的JSON结构的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.
			</para></param>
      <param name="target">要在其上填充值的目标对象。<para>原文：The target object to populate values onto.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>反序列化指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 所包含的Json结构。<para>原文：
				Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></summary>
      <param name="reader">包含要反序列化的JSON结构的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.
			</para></param>
      <returns>正在反序列化的 <see cref="T:System.Object" /> 。<para>原文：
				The <see cref="T:System.Object" /> being deserialized.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)" tran:state="Complete">
      <summary>将指定的 <see cref="T:System.IO.StringReader" /> 包含的Json结构反序列化为指定类型的实例。<para>原文：
				Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
				into an instance of the specified type.
			</para></summary>
      <param name="reader">包含该对象的 <see cref="T:System.IO.TextReader" /> 。<para>原文：
				The <see cref="T:System.IO.TextReader" /> containing the object.
			</para></param>
      <param name="objectType">正在反序列化的对象的 <see cref="T:System.Type" /> 。<para>原文：
				The <see cref="T:System.Type" /> of object being deserialized.
			</para></param>
      <returns>正在反序列化的 <paramref name="objectType" /> 实例。<para>原文：
				The instance of <paramref name="objectType" /> being deserialized.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>将指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 包含的Json结构反序列化为指定类型的实例。<para>原文：
				Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
				into an instance of the specified type.
			</para></summary>
      <param name="reader">包含该对象的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.
			</para></param>
      <typeparam name="T">要反序列化的对象的类型。<para>原文：The type of the object to deserialize.</para></typeparam>
      <returns>正在反序列化的 <typeparamref name="T" /> 实例。<para>原文：
				The instance of <typeparamref name="T" /> being deserialized.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)" tran:state="Complete">
      <summary>将指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 包含的Json结构反序列化为指定类型的实例。<para>原文： 将指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 包含的Json结构反序列化为指定类型的实例。</para><para>原文：将指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 包含的Json结构反序列化为指定类型的实例。<para>原文：
				Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
				into an instance of the specified type.
			</para></para></summary>
      <param name="reader">包含该对象的 <see cref="T:Newtonsoft.Json.JsonReader" /> <para>原文： 包含该对象的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。</para><para>原文：包含该对象的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.
			</para></para></param>
      <param name="objectType">正在反序列化的对象的 <see cref="T:System.Type" /> <para>原文： 正在反序列化的对象的 <see cref="T:System.Type" /> 。</para><para>原文：正在反序列化的对象的 <see cref="T:System.Type" /> 。<para>原文：
				The <see cref="T:System.Type" /> of object being deserialized.
			</para></para></param>
      <returns>正在反序列化的 <paramref name="objectType" /> 实例。<para>原文： 正在反序列化的 <paramref name="objectType" /> 实例。</para><para>原文：正在反序列化的 <paramref name="objectType" /> 实例。<para>原文：
				The instance of <paramref name="objectType" /> being deserialized.
			</para></para></returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)" tran:state="Complete">
      <summary>序列化指定的 <see cref="T:System.Object" /> 并将Json结构写入<c>Stream</c>使用指定的 <see cref="T:System.IO.TextWriter" /> <para>原文： 序列化指定的 <see cref="T:System.Object" /> 并将Json结构写入<c>Stream</c>使用指定的 <see cref="T:System.IO.TextWriter" /> 。</para><para>原文：序列化指定的 <see cref="T:System.Object" /> 并将Json结构写入<c>Stream</c>使用指定的 <see cref="T:System.IO.TextWriter" /> 。<para>原文：
				Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
				to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />.
			</para></para></summary>
      <param name="textWriter"> <see cref="T:System.IO.TextWriter" /> 用于编写Json结构。<para>原文： <see cref="T:System.IO.TextWriter" /> 用于编写Json结构。</para><para>原文：<see cref="T:System.IO.TextWriter" /> 用于编写Json结构。<para>原文：
				The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.
			</para></para></param>
      <param name="value">要序列化的 <see cref="T:System.Object" /> <para>原文： 要序列化的 <see cref="T:System.Object" /> 。</para><para>原文：要序列化的 <see cref="T:System.Object" /> 。<para>原文：
				The <see cref="T:System.Object" /> to serialize.
			</para></para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)" tran:state="Complete">
      <summary>序列化指定的 <see cref="T:System.Object" /> 并将Json结构写入<c>Stream</c>使用指定的 <see cref="T:System.IO.TextWriter" /> 。<para>原文：
				Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
				to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />.
			</para></summary>
      <param name="jsonWriter">
        <see cref="T:Newtonsoft.Json.JsonWriter" /> 用于编写Json结构。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.
			</para></param>
      <param name="value">要序列化的 <see cref="T:System.Object" /> 。<para>原文：
				The <see cref="T:System.Object" /> to serialize.
			</para></param>
      <param name="objectType">正在序列化的值的类型。如果值的类型不匹配，则当 <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> 自动写出类型名称时，使用此参数。指定类型是可选的。<para>原文：
				The type of the value being serialized.
				This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
				Specifing the type is optional.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)" tran:state="Complete">
      <summary>序列化指定的 <see cref="T:System.Object" /> 并将Json结构写入<c>Stream</c>使用指定的 <see cref="T:System.IO.TextWriter" /> 。<para>原文：
				Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
				to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />.
			</para></summary>
      <param name="textWriter">
        <see cref="T:System.IO.TextWriter" /> 用于编写Json结构。<para>原文：
				The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.
			</para></param>
      <param name="value">要序列化的 <see cref="T:System.Object" /> 。<para>原文：
				The <see cref="T:System.Object" /> to serialize.
			</para></param>
      <param name="objectType">正在序列化的值的类型。如果值的类型不匹配，则当 <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> 自动写出类型名称时，使用此参数。指定类型是可选的。<para>原文：
				The type of the value being serialized.
				This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
				Specifing the type is optional.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)" tran:state="Complete">
      <summary>序列化指定的 <see cref="T:System.Object" /> 并将Json结构写入<c>Stream</c>使用指定的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
				to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />.
			</para></summary>
      <param name="jsonWriter">
        <see cref="T:Newtonsoft.Json.JsonWriter" /> 用于编写Json结构。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.
			</para></param>
      <param name="value">要序列化的 <see cref="T:System.Object" /> 。<para>原文：
				The <see cref="T:System.Object" /> to serialize.
			</para></param>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error" tran:state="Complete">
      <summary>在序列化和反序列化期间发生 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 错误时发生。<para>原文：
				Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver" tran:state="Complete">
      <summary>获取或设置序列化程序在解析引用时使用的 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder" tran:state="Complete">
      <summary>获取或设置序列化程序在解析类型名时使用的 <see cref="T:System.Runtime.Serialization.SerializationBinder" /> 。<para>原文：
				Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter" tran:state="Complete">
      <summary>获取或设置序列化程序在写入跟踪消息时使用的 <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
			</para></summary>
      <value>追踪器。<para>原文：The trace writer.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" tran:state="Complete">
      <summary>获取或设置序列化程序处理类型名写入和读取的方式。<para>原文：
				Gets or sets how type name writing and reading is handled by the serializer.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat" tran:state="Complete">
      <summary>获取或设置序列化程序写入和解析类型名程序集的方式。<para>原文：
				Gets or sets how a type name assembly is written and resolved by the serializer.
			</para></summary>
      <value>类型名是程序集格式。<para>原文：The type name assembly format.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling" tran:state="Complete">
      <summary>获取或设置序列化程序保留对象引用的方式。<para>原文：
				Gets or sets how object references are preserved by the serializer.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置如何处理引用循环（例如，类引用自身）。<para>原文：
				Get or set how reference loops (e.g. a class referencing itself) is handled.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling" tran:state="Complete">
      <summary>获取或设置在反序列化过程中如何处理缺少的成员（例如，JSON包含的属性不是对象上的成员）。<para>原文：
				Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling" tran:state="Complete">
      <summary>获取或设置在序列化和反序列化期间如何处理空值。<para>原文：
				Get or set how null values are handled during serialization and deserialization.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling" tran:state="Complete">
      <summary>获取或设置在序列化和反序列化期间如何处理空默认值。<para>原文：
				Get or set how null default are handled during serialization and deserialization.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling" tran:state="Complete">
      <summary>获取或设置在反序列化过程中创建对象的方式。<para>原文：
				Gets or sets how objects are created during deserialization.
			</para></summary>
      <value>对象创建处理。<para>原文：The object creation handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling" tran:state="Complete">
      <summary>获取或设置在反序列化期间如何使用构造函数。<para>原文：
				Gets or sets how constructors are used during deserialization.
			</para></summary>
      <value>构造函数正在处理。<para>原文：The constructor handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling" tran:state="Complete">
      <summary>获取或设置反序列化期间元数据属性的使用方式。<para>原文：
				Gets or sets how metadata properties are used during deserialization.
			</para></summary>
      <value>元数据属性处理。<para>原文：The metadata properties handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters" tran:state="Complete">
      <summary>获取将在序列化期间使用的集合。<para>原文：
				Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
			</para></summary>
      <value>将在序列化期间使用的集合。<para>原文：
				Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver" tran:state="Complete">
      <summary>获取或设置序列化程序在序列化时使用的协定解析程序。NET对象转换为JSON，反之亦然。<para>原文：
				Gets or sets the contract resolver used by the serializer when
				serializing .NET objects to JSON and vice versa.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context" tran:state="Complete">
      <summary>获取或设置序列化程序在调用序列化回调方法时使用的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 。<para>原文：
				Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
			</para></summary>
      <value>背景。<para>原文：The context.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting" tran:state="Complete">
      <summary>指示JSON文本输出的格式。<para>原文：
				Indicates how JSON text output is formatted.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling" tran:state="Complete">
      <summary>获取或设置如何将日期写入JSON文本。<para>原文：
				Get or set how dates are written to JSON text.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling" tran:state="Complete">
      <summary>获取或设置 <see cref="T:System.DateTime" /> 时区在序列化和反序列化期间的处理方式。<para>原文：
				Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling" tran:state="Complete">
      <summary>获取或设置读取JSON时如何解析日期格式的字符串，例如“\/date（1198908717056）\/”和“2012-03-21T05:40Z”。<para>原文：
				Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling" tran:state="Complete">
      <summary>获取或设置读取JSON文本时如何解析浮点数，例如1.0和9.9。<para>原文：
				Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling" tran:state="Complete">
      <summary>获取或设置特殊浮点数，例如 <see cref="F:System.Double.NaN" /> 、 <see cref="F:System.Double.PositiveInfinity" /> 和 <see cref="F:System.Double.NegativeInfinity" /> 如何写入JSON文本。<para>原文：
				Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
				<see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
				are written as JSON text.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling" tran:state="Complete">
      <summary>获取或设置在编写JSON文本时如何转义字符串。<para>原文：
				Get or set how strings are escaped when writing JSON text.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString" tran:state="Complete">
      <summary>获取或设置写入JSON文本时 <see cref="T:System.DateTime" /> 和 <see cref="T:System.DateTimeOffset" /> 值的格式设置。<para>原文：
				Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture" tran:state="Complete">
      <summary>获取或设置读取JSON时使用的区域性。默认值为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 。<para>原文：
				Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth" tran:state="Complete">
      <summary>获取或设置读取JSON时允许的最大深度。阅读超过此深度将抛出一个 <see cref="T:Newtonsoft.Json.JsonReaderException" /> 。<para>原文：
				Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent" tran:state="Complete">
      <summary>获取一个值，该值指示在反序列化对象后是否会检查其他JSON内容。<para>原文：
				Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
			</para></summary>
      <value>
        <c>true</c>在反序列化对象后，是否会检查其他JSON内容；否则<c>false</c>.<para>原文：<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions" tran:state="Complete">
      <summary>包含LINQ到JSON的扩展方法。<para>原文：
				Contains the LINQ to JSON extension methods.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})" tran:state="Complete">
      <summary>返回包含源集合中每个标记的祖先的标记集合。<para>原文：
				Returns a collection of tokens that contains the ancestors of every token in the source collection.
			</para></summary>
      <typeparam name="T">源中对象的类型，约束为 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></typeparam>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <returns>包含源集合中每个节点的祖先的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})" tran:state="Complete">
      <summary>返回包含源集合中每个令牌的子代的令牌集合。<para>原文：
				Returns a collection of tokens that contains the descendants of every token in the source collection.
			</para></summary>
      <typeparam name="T">源中对象的类型，约束为 <see cref="T:Newtonsoft.Json.Linq.JContainer" /> 。<para>原文：
				The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
			</para></typeparam>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <returns>
        <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，包含源集合中每个节点的后代。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})" tran:state="Complete">
      <summary>返回源集合中每个对象的子属性集合。<para>原文：
				Returns a collection of child properties of every object in the source collection.
			</para></summary>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.
			</para></param>
      <returns>
        <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，包含源集合中每个对象的属性。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)" tran:state="Complete">
      <summary>返回源集合中具有给定键的每个对象的子值的集合。<para>原文：
				Returns a collection of child values of every object in the source collection with the given key.
			</para></summary>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <param name="key">令牌密钥。<para>原文：The token key.</para></param>
      <returns>
        <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，包含源集合中具有给定键的每个节点的值。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})" tran:state="Complete">
      <summary>返回源集合中每个对象的子值的集合。<para>原文：
				Returns a collection of child values of every object in the source collection.
			</para></summary>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <returns>
        <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，包含源集合中每个节点的值。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)" tran:state="Complete">
      <summary>返回源集合中具有给定键的每个对象的已转换子值的集合。<para>原文：
				Returns a collection of converted child values of every object in the source collection with the given key.
			</para></summary>
      <typeparam name="U">要将值转换为的类型。<para>原文：The type to convert the values to.</para></typeparam>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <param name="key">令牌密钥。<para>原文：The token key.</para></param>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，它包含源集合中每个节点的转换值以及给定的键。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})" tran:state="Complete">
      <summary>返回源集合中每个对象的已转换子值的集合。<para>原文：
				Returns a collection of converted child values of every object in the source collection.
			</para></summary>
      <typeparam name="U">要将值转换为的类型。<para>原文：The type to convert the values to.</para></typeparam>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <returns>包含源集合中每个节点的转换值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})" tran:state="Complete">
      <summary>转换值。<para>原文：
				Converts the value.
			</para></summary>
      <typeparam name="U">要将值转换为的类型。<para>原文：The type to convert the value to.</para></typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> 被转换为 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></param>
      <returns>转换后的值。<para>原文：A converted value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})" tran:state="Complete">
      <summary>转换值。<para>原文：
				Converts the value.
			</para></summary>
      <typeparam name="T">源集合类型。<para>原文：The source collection type.</para></typeparam>
      <typeparam name="U">要将值转换为的类型。<para>原文：The type to convert the value to.</para></typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> 被转换为 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></param>
      <returns>转换后的值。<para>原文：A converted value.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})" tran:state="Complete">
      <summary>返回源集合中每个数组的子标记的集合。<para>原文：
				Returns a collection of child tokens of every array in the source collection.
			</para></summary>
      <typeparam name="T">源集合类型。<para>原文：The source collection type.</para></typeparam>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <returns>
        <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，包含源集合中每个节点的值。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})" tran:state="Complete">
      <summary>返回源集合中每个数组的已转换子标记的集合。<para>原文：
				Returns a collection of converted child tokens of every array in the source collection.
			</para></summary>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <typeparam name="U">要将值转换为的类型。<para>原文：The type to convert the values to.</para></typeparam>
      <typeparam name="T">源集合类型。<para>原文：The source collection type.</para></typeparam>
      <returns>包含源集合中每个节点的转换值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})" tran:state="Complete">
      <summary>返回键入为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> 的输入。<para>原文：
				Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
			</para></summary>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <returns>输入类型为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> 。<para>原文：
				The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})" tran:state="Complete">
      <summary>返回键入为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> 的输入。<para>原文：
				Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
			</para></summary>
      <typeparam name="T">源集合类型。<para>原文：The source collection type.</para></typeparam>
      <param name="source">包含源集合的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.
			</para></param>
      <returns>输入类型为 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> 。<para>原文：
				The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
			</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor" tran:state="Complete">
      <summary>表示JSON构造函数。<para>原文：
				Represents a JSON constructor.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer" tran:state="Complete">
      <summary>表示可以包含其他令牌的令牌。<para>原文：
				Represents a token that can contain other tokens.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)" tran:state="Complete">
      <summary>引发 <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> 事件。<para>原文：
				Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
			</para></summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 实例。<para>原文：
				The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)" tran:state="Complete">
      <summary>引发 <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> 事件。<para>原文：
				Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
			</para></summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 实例。<para>原文：
				The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" tran:state="Complete">
      <summary>引发 <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> 事件。<para>原文：
				Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
			</para></summary>
      <param name="e">包含事件数据的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 实例。<para>原文：
				The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children" tran:state="Complete">
      <summary>按文档顺序返回此标记的子标记的集合。<para>原文：
				Returns a collection of the child tokens of this token, in document order.
			</para></summary>
      <returns>一个 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，按文档顺序包含该 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的子标记。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1" tran:state="Complete">
      <summary>按文档顺序返回此标记的子值的集合。<para>原文：
				Returns a collection of the child values of this token, in document order.
			</para></summary>
      <typeparam name="T">要将值转换为的类型。<para>原文：The type to convert the values to.</para></typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> 按文档顺序包含此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的子值。<para>原文：
				A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants" tran:state="Complete">
      <summary>按文档顺序返回此标记的子代标记集合。<para>原文：
				Returns a collection of the descendant tokens for this token in document order.
			</para></summary>
      <returns>包含 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的后代标记的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)" tran:state="Complete">
      <summary>将指定内容添加为此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的子项。<para>原文：
				Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <param name="content">要添加的内容。<para>原文：The content to be added.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)" tran:state="Complete">
      <summary>将指定的内容添加为此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的第一个子项。<para>原文：
				Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <param name="content">要添加的内容。<para>原文：The content to be added.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter" tran:state="Complete">
      <summary>创建一个 <see cref="T:Newtonsoft.Json.JsonWriter" /> ，可用于向 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 添加令牌。<para>原文：
				Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <returns>一个 <see cref="T:Newtonsoft.Json.JsonWriter" /> 已准备好写入内容。<para>原文：
				An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)" tran:state="Complete">
      <summary>用指定的内容替换此令牌的子节点。<para>原文：
				Replaces the children nodes of this token with the specified content.
			</para></summary>
      <param name="content">内容。<para>原文：The content.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll" tran:state="Complete">
      <summary>从此令牌中删除子节点。<para>原文：
				Removes the child nodes from this token.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)" tran:state="Complete">
      <summary>将指定的内容合并到此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 中。<para>原文：
				Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <param name="content">要合并的内容。<para>原文：The content to be merged.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)" tran:state="Complete">
      <summary>使用 <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> 将指定的内容合并到此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 中。<para>原文：
				Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" /> using <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" />.
			</para></summary>
      <param name="content">要合并的内容。<para>原文：The content to be merged.</para></param>
      <param name="settings">
        <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> 用于合并内容。<para>原文：
				The <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> used to merge the content.
			</para></param>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged" tran:state="Complete">
      <summary>当列表更改或列表中的某项更改时发生。<para>原文：
				Occurs when the list changes or an item in the list changes.
			</para></summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew" tran:state="Complete">
      <summary>在将项添加到集合之前发生。<para>原文：
				Occurs before an item is added to the collection.
			</para></summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" tran:state="Complete">
      <summary>在集合的项目列表已更改或集合已重置时发生。<para>原文：
				Occurs when the items list of the collection has changed, or the collection is reset.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens" tran:state="Complete">
      <summary>获取容器的子令牌。<para>原文：
				Gets the container's children tokens.
			</para></summary>
      <value>容器的子代币。<para>原文：The container's children tokens.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues" tran:state="Complete">
      <summary>获取一个值，该值指示此令牌是否具有子令牌。<para>原文：
				Gets a value indicating whether this token has child tokens.
			</para></summary>
      <value>
        <c>true</c>如果该标记具有子值；否则<c>false</c>.<para>原文：<c>true</c> if this token has child values; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First" tran:state="Complete">
      <summary>获取此令牌的第一个子令牌。<para>原文：
				Get the first child token of this token.
			</para></summary>
      <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的第一个子标记的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last" tran:state="Complete">
      <summary>获取此令牌的最后一个子令牌。<para>原文：
				Get the last child token of this token.
			</para></summary>
      <value>包含 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的最后一个子标记的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count" tran:state="Complete">
      <summary>获取子JSON标记的计数。<para>原文：
				Gets the count of child JSON tokens.
			</para></summary>
      <value>子JSON标记的计数<para>原文：The count of child JSON tokens</para></value>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)" tran:state="Complete">
      <summary>从另一个 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
			</para></summary>
      <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 对象。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])" tran:state="Complete">
      <summary>用指定的名称和内容初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
			</para></summary>
      <param name="name">构造函数名。<para>原文：The constructor name.</para></param>
      <param name="content">构造函数的内容。<para>原文：The contents of the constructor.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)" tran:state="Complete">
      <summary>用指定的名称和内容初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
			</para></summary>
      <param name="name">构造函数名。<para>原文：The constructor name.</para></param>
      <param name="content">构造函数的内容。<para>原文：The contents of the constructor.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)" tran:state="Complete">
      <summary>用指定的名称初始化 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
			</para></summary>
      <param name="name">构造函数名。<para>原文：The constructor name.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
			</para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.
			</para></param>
      <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：
				A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>从 <see cref="T:Newtonsoft.Json.JsonReader" /> 加载 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 。<para>原文：
				Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></summary>
      <param name="reader">一个 <see cref="T:Newtonsoft.Json.JsonReader" /> 将被读取为 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 的内容。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.
			</para></param>
      <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 读取的JSON的 <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens" tran:state="Complete">
      <summary>获取容器的子令牌。<para>原文：
				Gets the container's children tokens.
			</para></summary>
      <value>容器的子代币。<para>原文：The container's children tokens.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name" tran:state="Complete">
      <summary>获取或设置此构造函数的名称。<para>原文：
				Gets or sets the name of this constructor.
			</para></summary>
      <value>构造函数名。<para>原文：The constructor name.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type" tran:state="Complete">
      <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的节点类型。<para>原文：
				Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <value>类型。<para>原文：The type.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)" tran:state="Complete">
      <summary>获取具有指定键的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
			</para></summary>
      <value>使用指定的键启动 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
			</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1" tran:state="Complete">
      <summary>表示 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 对象的集合。<para>原文：
				Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
			</para></summary>
      <typeparam name="T">代币的类型<para>原文：The type of token</para></typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.Linq.JToken" /> 对象的空集合。<para>原文：
				An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> 结构的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
			</para></summary>
      <param name="enumerable">可枚举的。<para>原文：The enumerable.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator" tran:state="Complete">
      <summary>返回遍历集合的枚举数。<para>原文：
				Returns an enumerator that iterates through the collection.
			</para></summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 可用于遍历集合。<para>原文：
				A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator" tran:state="Complete">
      <summary>返回遍历集合的枚举数。<para>原文：
				Returns an enumerator that iterates through a collection.
			</para></summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，可用于遍历集合。<para>原文：
				An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)" tran:state="Complete">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等于此实例。<para>原文：
				Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
			</para></summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" /> 。<para>原文：
				The <see cref="T:System.Object" /> to compare with this instance.
			</para></param>
      <returns>
        <c>true</c>如果指定的 <see cref="T:System.Object" /> 等于此实例；否则<c>false</c>.<para>原文：<c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode" tran:state="Complete">
      <summary>返回此实例的哈希代码。<para>原文：
				Returns a hash code for this instance.
			</para></summary>
      <returns>此实例的哈希代码，适用于哈希算法和哈希表等数据结构。<para>原文：
				A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)" tran:state="Complete">
      <summary>获取具有指定键的 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> 。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
			</para></summary>
      <value></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject" tran:state="Complete">
      <summary>表示一个JSON对象。<para>原文：
				Represents a JSON object.
			</para></summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></para>
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)" tran:state="Complete">
      <summary>从另一个 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
			</para></summary>
      <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 对象。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])" tran:state="Complete">
      <summary>用指定的内容初始化 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
			</para></summary>
      <param name="content">对象的内容。<para>原文：The contents of the object.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)" tran:state="Complete">
      <summary>用指定的内容初始化 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
			</para></summary>
      <param name="content">对象的内容。<para>原文：The contents of the object.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties" tran:state="Complete">
      <summary>获取此对象属性的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
			</para></summary>
      <returns>此对象属性的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 。<para>原文：
				An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)" tran:state="Complete">
      <summary>获取指定名称的 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 。<para>原文：
				Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
			</para></summary>
      <param name="name">属性名。<para>原文：The property name.</para></param>
      <returns>具有指定名称或null的 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues" tran:state="Complete">
      <summary>获取此对象的属性值的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> 。<para>原文：
				Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
			</para></summary>
      <returns>此对象属性值的 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> 。<para>原文：
				An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>从 <see cref="T:Newtonsoft.Json.JsonReader" /> 加载 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 。<para>原文：
				Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></summary>
      <param name="reader">一个 <see cref="T:Newtonsoft.Json.JsonReader" /> 将被读取为 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 的内容。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.
			</para></param>
      <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 读取的JSON的 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)" tran:state="Complete">
      <summary>从包含JSON的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 。<para>原文：
				Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
			</para></summary>
      <param name="json">包含JSON的 <see cref="T:System.String" /> 。<para>原文：
				A <see cref="T:System.String" /> that contains JSON.
			</para></param>
      <returns>从包含JSON的字符串填充的 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.
			</para></returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></para>
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)" tran:state="Complete">
      <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
			</para></summary>
      <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 的对象。<para>原文：
				The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.
			</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> 具有指定对象的值<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
			</para></summary>
      <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JObject" /> 的对象。<para>原文：
				The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.
			</para></param>
      <param name="jsonSerializer">将用于读取对象的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.
			</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> 具有指定对象的值<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
			</para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.
			</para></param>
      <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：
				A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)" tran:state="Complete">
      <summary>获取具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <returns>具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)" tran:state="Complete">
      <summary>获取具有指定属性名的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。将首先搜索确切的属性名称，如果未找到匹配的属性，则将使用 <see cref="T:System.StringComparison" /> 来匹配属性。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
				The exact property name will be searched for first and if no matching property is found then
				the <see cref="T:System.StringComparison" /> will be used to match a property.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <param name="comparison">指定如何比较字符串的枚举值之一。<para>原文：One of the enumeration values that specifies how the strings will be compared.</para></param>
      <returns>具有指定属性名称的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)" tran:state="Complete">
      <summary>尝试获取具有指定属性名的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。将首先搜索确切的属性名称，如果未找到匹配的属性，则将使用 <see cref="T:System.StringComparison" /> 来匹配属性。<para>原文：
				Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
				The exact property name will be searched for first and if no matching property is found then
				the <see cref="T:System.StringComparison" /> will be used to match a property.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <param name="comparison">指定如何比较字符串的枚举值之一。<para>原文：One of the enumeration values that specifies how the strings will be compared.</para></param>
      <returns>如果成功检索到值，则为true；否则就错了。<para>原文：true if a value was successfully retrieved; otherwise, false.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>添加指定的属性名。<para>原文：
				Adds the specified property name.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)" tran:state="Complete">
      <summary>删除具有指定名称的属性。<para>原文：
				Removes the property with the specified name.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <returns>如果项目已成功删除，则为true；否则就错了。<para>原文：true if item was successfully removed; otherwise, false.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)" tran:state="Complete">
      <summary>尝试获取值。<para>原文：
				Tries the get value.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
      <returns>如果成功检索到值，则为true；否则就错了。<para>原文：true if a value was successfully retrieved; otherwise, false.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator" tran:state="Complete">
      <summary>返回遍历集合的枚举数。<para>原文：
				Returns an enumerator that iterates through the collection.
			</para></summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 可用于遍历集合。<para>原文：
				A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)" tran:state="Complete">
      <summary>使用提供的参数引发 <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> 事件。<para>原文：
				Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)" tran:state="Complete">
      <summary>使用提供的参数引发 <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> 事件。<para>原文：
				Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties" tran:state="Complete">
      <summary>返回此组件实例的属性。<para>原文：
				Returns the properties for this instance of a component.
			</para></summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 。<para>原文：
				A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties for this component instance.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])" tran:state="Complete">
      <summary>使用属性数组作为筛选器返回组件的此实例的属性。<para>原文：
				Returns the properties for this instance of a component using the attribute array as a filter.
			</para></summary>
      <param name="attributes">用作过滤器的 <see cref="T:System.Attribute" /> 类型的数组。<para>原文：
				An array of type <see cref="T:System.Attribute" /> that is used as a filter.
			</para></param>
      <returns>表示此组件实例的筛选属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 。<para>原文：
				A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the filtered properties for this component instance.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes" tran:state="Complete">
      <summary>返回此组件实例的自定义属性集合。<para>原文：
				Returns a collection of custom attributes for this instance of a component.
			</para></summary>
      <returns>包含此对象属性的 <see cref="T:System.ComponentModel.AttributeCollection" /> 。<para>原文：
				An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for this object.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName" tran:state="Complete">
      <summary>返回此组件实例的类名。<para>原文：
				Returns the class name of this instance of a component.
			</para></summary>
      <returns>对象的类名，如果类没有名称，则为null。<para>原文：
				The class name of the object, or null if the class does not have a name.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName" tran:state="Complete">
      <summary>返回组件的此实例的名称。<para>原文：
				Returns the name of this instance of a component.
			</para></summary>
      <returns>对象的名称，如果对象没有名称，则为null。<para>原文：
				The name of the object, or null if the object does not have a name.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter" tran:state="Complete">
      <summary>返回此组件实例的类型转换器。<para>原文：
				Returns a type converter for this instance of a component.
			</para></summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> 是此对象的转换器，如果此对象没有 <see cref="T:System.ComponentModel.TypeConverter" /> ，则为null。<para>原文：
				A <see cref="T:System.ComponentModel.TypeConverter" /> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent" tran:state="Complete">
      <summary>返回此组件实例的默认事件。<para>原文：
				Returns the default event for this instance of a component.
			</para></summary>
      <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> ，如果此对象没有事件，则为null。<para>原文：
				An <see cref="T:System.ComponentModel.EventDescriptor" /> that represents the default event for this object, or null if this object does not have events.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty" tran:state="Complete">
      <summary>返回此组件实例的默认属性。<para>原文：
				Returns the default property for this instance of a component.
			</para></summary>
      <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> ，如果此对象没有属性，则为null。<para>原文：
				A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the default property for this object, or null if this object does not have properties.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)" tran:state="Complete">
      <summary>返回此组件实例的指定类型的编辑器。<para>原文：
				Returns an editor of the specified type for this instance of a component.
			</para></summary>
      <param name="editorBaseType">表示此对象的编辑器的 <see cref="T:System.Type" /> 。<para>原文：
				A <see cref="T:System.Type" /> that represents the editor for this object.
			</para></param>
      <returns>指定类型的 <see cref="T:System.Object" /> 作为此对象的编辑器，如果找不到编辑器，则为null。<para>原文：
				An <see cref="T:System.Object" /> of the specified type that is the editor for this object, or null if the editor cannot be found.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])" tran:state="Complete">
      <summary>使用指定的属性数组作为筛选器，返回此组件实例的事件。<para>原文：
				Returns the events for this instance of a component using the specified attribute array as a filter.
			</para></summary>
      <param name="attributes">用作过滤器的 <see cref="T:System.Attribute" /> 类型的数组。<para>原文：
				An array of type <see cref="T:System.Attribute" /> that is used as a filter.
			</para></param>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 。<para>原文：
				An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the filtered events for this component instance.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents" tran:state="Complete">
      <summary>返回此组件实例的事件。<para>原文：
				Returns the events for this instance of a component.
			</para></summary>
      <returns>表示此组件实例的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 。<para>原文：
				An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the events for this component instance.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)" tran:state="Complete">
      <summary>返回包含指定属性描述符描述的属性的对象。<para>原文：
				Returns an object that contains the property described by the specified property descriptor.
			</para></summary>
      <param name="pd">表示要找到其所有者的财产的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 。<para>原文：
				A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.
			</para></param>
      <returns>表示指定属性所有者的 <see cref="T:System.Object" /> 。<para>原文：
				An <see cref="T:System.Object" /> that represents the owner of the specified property.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)" tran:state="Complete">
      <summary>返回负责对该对象执行绑定操作的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 。<para>原文：
				Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
			</para></summary>
      <param name="parameter">运行时值的表达式树表示形式。<para>原文：The expression tree representation of the runtime value.</para></param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 来绑定此对象。<para>原文：
				The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens" tran:state="Complete">
      <summary>获取容器的子令牌。<para>原文：
				Gets the container's children tokens.
			</para></summary>
      <value>容器的子代币。<para>原文：The container's children tokens.</para></value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" tran:state="Complete">
      <summary>在属性值更改时发生。<para>原文：
				Occurs when a property value changes.
			</para></summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" tran:state="Complete">
      <summary>在属性值更改时发生。<para>原文：
				Occurs when a property value is changing.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type" tran:state="Complete">
      <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的节点类型。<para>原文：
				Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <value>类型。<para>原文：The type.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)" tran:state="Complete">
      <summary>获取具有指定键的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
			</para></summary>
      <value>使用指定的键启动 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)" tran:state="Complete">
      <summary>获取或设置具有指定属性名的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
			</para></summary>
      <value></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray" tran:state="Complete">
      <summary>表示JSON数组。<para>原文：
				Represents a JSON array.
			</para></summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></para>
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)" tran:state="Complete">
      <summary>从另一个 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
			</para></summary>
      <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 对象。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])" tran:state="Complete">
      <summary>用指定的内容初始化 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
			</para></summary>
      <param name="content">数组的内容。<para>原文：The contents of the array.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)" tran:state="Complete">
      <summary>用指定的内容初始化 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
			</para></summary>
      <param name="content">数组的内容。<para>原文：The contents of the array.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>从 <see cref="T:Newtonsoft.Json.JsonReader" /> 加载 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 。<para>原文：
				Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></summary>
      <param name="reader">一个 <see cref="T:Newtonsoft.Json.JsonReader" /> 将被读取为 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 的内容。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
			</para></param>
      <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 读取的JSON的 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)" tran:state="Complete">
      <summary>从包含JSON的字符串加载 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 。<para>原文：
				Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
			</para></summary>
      <param name="json">包含JSON的 <see cref="T:System.String" /> 。<para>原文：
				A <see cref="T:System.String" /> that contains JSON.
			</para></param>
      <returns>从包含JSON的字符串填充的 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.
			</para></returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></para>
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)" tran:state="Complete">
      <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
			</para></summary>
      <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 的对象。<para>原文：
				The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.
			</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> 具有指定对象的值<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)" tran:state="Complete">
      <summary>从对象创建 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
			</para></summary>
      <param name="o">将用于创建 <see cref="T:Newtonsoft.Json.Linq.JArray" /> 的对象。<para>原文：
				The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.
			</para></param>
      <param name="jsonSerializer">将用于读取对象的 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.
			</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> 具有指定对象的值<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
			</para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.
			</para></param>
      <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：
				A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>确定 <see cref="T:System.Collections.Generic.IList`1" /> 中特定项的索引。<para>原文：
				Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
			</para></summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1" /> 中定位的对象。<para>原文：
				The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
			</para></param>
      <returns>如果在列表中找到 <paramref name="item" /> 的索引；否则，-1。<para>原文：
				The index of <paramref name="item" /> if found in the list; otherwise, -1.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>在指定索引处向 <see cref="T:System.Collections.Generic.IList`1" /> 插入一项。<para>原文：
				Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
			</para></summary>
      <param name="index">应从零开始插入 <paramref name="item" /> 的索引。<para>原文：
				The zero-based index at which <paramref name="item" /> should be inserted.
			</para></param>
      <param name="item">要插入到 <see cref="T:System.Collections.Generic.IList`1" /> 中的对象。<para>原文：
				The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
			</para></param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。<para>原文：<paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
			</para></exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是只读的。<para>原文：
				The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
			</para></exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)" tran:state="Complete">
      <summary>删除指定索引处的 <see cref="T:System.Collections.Generic.IList`1" /> 项。<para>原文：
				Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
			</para></summary>
      <param name="index">要删除的项的从零开始的索引。<para>原文：The zero-based index of the item to remove.</para></param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。<para>原文：<paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
			</para></exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是只读的。<para>原文：
				The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
			</para></exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator" tran:state="Complete">
      <summary>返回遍历集合的枚举数。<para>原文：
				Returns an enumerator that iterates through the collection.
			</para></summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 可用于遍历集合。<para>原文：
				A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>将项目添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 。<para>原文：
				Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
			</para></summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。<para>原文：
				The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
			</para></param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的。<para>原文：
				The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
			</para></exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear" tran:state="Complete">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除所有项目。<para>原文：
				Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
			</para></summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的。<para>原文：
				The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
			</para></exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。<para>原文：
				Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
			</para></summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。<para>原文：
				The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
			</para></param>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" /> ，则为true；否则就错了。<para>原文：
				true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)" tran:state="Complete">
      <summary>抄送至。<para>原文：
				Copies to.
			</para></summary>
      <param name="array">阵列。<para>原文：The array.</para></param>
      <param name="arrayIndex">数组的索引。<para>原文：Index of the array.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除特定对象的第一个匹配项。<para>原文：
				Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
			</para></summary>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。<para>原文：
				The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
			</para></param>
      <returns>如果成功从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除 <paramref name="item" /> ，则为true；否则就错了。如果在原始的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" /> ，该方法也会返回false。<para>原文：
				true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
			</para></returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的。<para>原文：
				The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
			</para></exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens" tran:state="Complete">
      <summary>获取容器的子令牌。<para>原文：
				Gets the container's children tokens.
			</para></summary>
      <value>容器的子代币。<para>原文：The container's children tokens.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type" tran:state="Complete">
      <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的节点类型。<para>原文：
				Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <value>类型。<para>原文：The type.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)" tran:state="Complete">
      <summary>获取具有指定键的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
			</para></summary>
      <value>使用指定的键启动 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)" tran:state="Complete">
      <summary>获取或设置指定索引处的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
			</para></summary>
      <value></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly" tran:state="Complete">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。<para>原文：
				Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
			</para></summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为true；否则就错了。<para>原文：
				true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
			</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader" tran:state="Complete">
      <summary>表示提供对序列化Json数据的快速、非缓存、仅转发访问的读取器。<para>原文：
				Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
			</para></summary>
      <param name="token">要读取的令牌。<para>原文：The token to read from.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:Byte[]" /> 。<para>原文：
				Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
			</para></summary>
      <returns>如果下一个JSON标记为null，则为 <see cref="T:Byte[]" /> 或null引用。此方法将返回<c>null</c>在数组的末尾。<para>原文：
				A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
				Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
			</para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：
				A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
				Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
			</para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：
				A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsString" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.String" /> 。<para>原文：
				Reads the next JSON token from the stream as a <see cref="T:System.String" />.
			</para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：
				A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
				Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
			</para></summary>
      <returns>A <see cref="T:System.String" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：
				A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset" tran:state="Complete">
      <summary>从流中读取下一个JSON标记作为 <see cref="T:System.Nullable`1" /> 。<para>原文：
				Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
			</para></summary>
      <returns>A <see cref="T:System.Nullable`1" /> 。此方法将返回<c>null</c>在数组的末尾。<para>原文：
				A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read" tran:state="Complete">
      <summary>从流中读取下一个JSON标记。<para>原文：
				Reads the next JSON token from the stream.
			</para></summary>
      <returns>如果成功读取下一个令牌，则为true；如果没有更多令牌可读取，则为false。<para>原文：
				true if the next token was read successfully; false if there are no more tokens to read.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path" tran:state="Complete">
      <summary>获取当前JSON令牌的路径。<para>原文：
				Gets the path of the current JSON token.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter" tran:state="Complete">
      <summary>表示一个writer，它提供了生成Json数据的快速、非缓存、仅向前的方法。<para>原文：
				Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> 类的新实例，并将其写入给定的 <see cref="T:Newtonsoft.Json.Linq.JContainer" /> 。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
			</para></summary>
      <param name="container">正在写入的容器。<para>原文：The container being written to.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush" tran:state="Complete">
      <summary>将缓冲区中的任何内容刷新到基础流，同时也刷新基础流。<para>原文：
				Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close" tran:state="Complete">
      <summary>关闭此流和基础流。<para>原文：
				Closes this stream and the underlying stream.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject" tran:state="Complete">
      <summary>写入Json对象的开头。<para>原文：
				Writes the beginning of a Json object.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray" tran:state="Complete">
      <summary>写入Json数组的开头。<para>原文：
				Writes the beginning of a Json array.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)" tran:state="Complete">
      <summary>使用给定名称写入构造函数的开头。<para>原文：
				Writes the start of a constructor with the given name.
			</para></summary>
      <param name="name">构造函数的名称。<para>原文：The name of the constructor.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)" tran:state="Complete">
      <summary>写下结尾。<para>原文：
				Writes the end.
			</para></summary>
      <param name="token">代币。<para>原文：The token.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)" tran:state="Complete">
      <summary>在Json对象上写入名称/值对的属性名。<para>原文：
				Writes the property name of a name/value pair on a Json object.
			</para></summary>
      <param name="name">财产的名称。<para>原文：The name of the property.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Object" /> 值。如果该值不能作为单个JSON标记写入，则会引发错误。<para>原文：
				Writes a <see cref="T:System.Object" /> value.
				An error will raised if the value cannot be written as a single JSON token.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Object" /> 值。<para>原文：
				The <see cref="T:System.Object" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull" tran:state="Complete">
      <summary>写入空值。<para>原文：
				Writes a null value.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined" tran:state="Complete">
      <summary>写入未定义的值。<para>原文：
				Writes an undefined value.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)" tran:state="Complete">
      <summary>编写原始JSON。<para>原文：
				Writes raw JSON.
			</para></summary>
      <param name="json">要编写的原始JSON。<para>原文：The raw JSON to write.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)" tran:state="Complete">
      <summary>写评论<code>/*...*/</code>包含指定文本的。<para>原文：
				Writes out a comment <code>/*...*/</code> containing the specified text.
			</para></summary>
      <param name="text">要放置在注释内的文本。<para>原文：Text to place inside the comment.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.String" /> 值。<para>原文：
				Writes a <see cref="T:System.String" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.String" /> 值。<para>原文：
				The <see cref="T:System.String" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int32" /> 值。<para>原文：
				Writes a <see cref="T:System.Int32" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Int32" /> 值。<para>原文：
				The <see cref="T:System.Int32" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt32" /> 值。<para>原文：
				Writes a <see cref="T:System.UInt32" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt32" /> 值。<para>原文：
				The <see cref="T:System.UInt32" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int64" /> 值。<para>原文：
				Writes a <see cref="T:System.Int64" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Int64" /> 值。<para>原文：
				The <see cref="T:System.Int64" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt64" /> 值。<para>原文：
				Writes a <see cref="T:System.UInt64" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt64" /> 值。<para>原文：
				The <see cref="T:System.UInt64" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Single" /> 值。<para>原文：
				Writes a <see cref="T:System.Single" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Single" /> 值。<para>原文：
				The <see cref="T:System.Single" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Double" /> 值。<para>原文：
				Writes a <see cref="T:System.Double" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Double" /> 值。<para>原文：
				The <see cref="T:System.Double" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Boolean" /> 值。<para>原文：
				Writes a <see cref="T:System.Boolean" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Boolean" /> 值。<para>原文：
				The <see cref="T:System.Boolean" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Int16" /> 值。<para>原文：
				Writes a <see cref="T:System.Int16" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Int16" /> 值。<para>原文：
				The <see cref="T:System.Int16" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.UInt16" /> 值。<para>原文：
				Writes a <see cref="T:System.UInt16" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.UInt16" /> 值。<para>原文：
				The <see cref="T:System.UInt16" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Char" /> 值。<para>原文：
				Writes a <see cref="T:System.Char" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Char" /> 值。<para>原文：
				The <see cref="T:System.Char" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Byte" /> 值。<para>原文：
				Writes a <see cref="T:System.Byte" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Byte" /> 值。<para>原文：
				The <see cref="T:System.Byte" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.SByte" /> 值。<para>原文：
				Writes a <see cref="T:System.SByte" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.SByte" /> 值。<para>原文：
				The <see cref="T:System.SByte" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Decimal" /> 值。<para>原文：
				Writes a <see cref="T:System.Decimal" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Decimal" /> 值。<para>原文：
				The <see cref="T:System.Decimal" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTime" /> 值。<para>原文：
				Writes a <see cref="T:System.DateTime" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTime" /> 值。<para>原文：
				The <see cref="T:System.DateTime" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：
				Writes a <see cref="T:System.DateTimeOffset" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.DateTimeOffset" /> 值。<para>原文：
				The <see cref="T:System.DateTimeOffset" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])" tran:state="Complete">
      <summary>写入一个 <see cref="T:Byte[]" /> 值。<para>原文：
				Writes a <see cref="T:Byte[]" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:Byte[]" /> 值。<para>原文：
				The <see cref="T:Byte[]" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.TimeSpan" /> 值。<para>原文：
				Writes a <see cref="T:System.TimeSpan" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.TimeSpan" /> 值。<para>原文：
				The <see cref="T:System.TimeSpan" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Guid" /> 值。<para>原文：
				Writes a <see cref="T:System.Guid" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Guid" /> 值。<para>原文：
				The <see cref="T:System.Guid" /> value to write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)" tran:state="Complete">
      <summary>写入一个 <see cref="T:System.Uri" /> 值。<para>原文：
				Writes a <see cref="T:System.Uri" /> value.
			</para></summary>
      <param name="value">要写入的 <see cref="T:System.Uri" /> 值。<para>原文：
				The <see cref="T:System.Uri" /> value to write.
			</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token" tran:state="Complete">
      <summary>获取正在写入的令牌。<para>原文：
				Gets the token being writen.
			</para></summary>
      <value>正在写的记号。<para>原文：The token being writen.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty" tran:state="Complete">
      <summary>表示JSON属性。<para>原文：
				Represents a JSON property.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)" tran:state="Complete">
      <summary>从另一个 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 对象初始化 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
			</para></summary>
      <param name="other">要从中复制的 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 对象。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
			</para></summary>
      <param name="name">属性名。<para>原文：The property name.</para></param>
      <param name="content">属性内容。<para>原文：The property content.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
			</para></summary>
      <param name="name">属性名。<para>原文：The property name.</para></param>
      <param name="content">属性内容。<para>原文：The property content.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" tran:state="Complete">
      <summary>将此令牌写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
			</para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.
			</para></param>
      <param name="converters">写入令牌时将使用的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 的集合。<para>原文：
				A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>从 <see cref="T:Newtonsoft.Json.JsonReader" /> 加载 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 。<para>原文：
				Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></summary>
      <param name="reader">一个 <see cref="T:Newtonsoft.Json.JsonReader" /> 将被读取为 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 的内容。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
			</para></param>
      <returns>包含从指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 读取的JSON的 <see cref="T:Newtonsoft.Json.Linq.JProperty" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens" tran:state="Complete">
      <summary>获取容器的子令牌。<para>原文：
				Gets the container's children tokens.
			</para></summary>
      <value>容器的子代币。<para>原文：The container's children tokens.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name" tran:state="Complete">
      <summary>获取属性名。<para>原文：
				Gets the property name.
			</para></summary>
      <value>属性名。<para>原文：The property name.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value" tran:state="Complete">
      <summary>获取或设置属性值。<para>原文：
				Gets or sets the property value.
			</para></summary>
      <value>财产价值。<para>原文：The property value.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type" tran:state="Complete">
      <summary>获取此 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 的节点类型。<para>原文：
				Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <value>类型。<para>原文：The type.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType" tran:state="Complete">
      <summary>指定令牌的类型。<para>原文：
				Specifies the type of token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None" tran:state="Complete">
      <summary>没有设置令牌类型。<para>原文：
				No token type has been set.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object" tran:state="Complete">
      <summary>一个JSON对象。<para>原文：
				A JSON object.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array" tran:state="Complete">
      <summary>一个JSON数组。<para>原文：
				A JSON array.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor" tran:state="Complete">
      <summary>JSON构造函数。<para>原文：
				A JSON constructor.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property" tran:state="Complete">
      <summary>JSON对象属性。<para>原文：
				A JSON object property.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment" tran:state="Complete">
      <summary>评论。<para>原文：
				A comment.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer" tran:state="Complete">
      <summary>整数值。<para>原文：
				An integer value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float" tran:state="Complete">
      <summary>浮点值。<para>原文：
				A float value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String" tran:state="Complete">
      <summary>字符串值。<para>原文：
				A string value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean" tran:state="Complete">
      <summary>一个布尔值。<para>原文：
				A boolean value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null" tran:state="Complete">
      <summary>空值。<para>原文：
				A null value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined" tran:state="Complete">
      <summary>未定义的值。<para>原文：
				An undefined value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date" tran:state="Complete">
      <summary>日期值。<para>原文：
				A date value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw" tran:state="Complete">
      <summary>原始JSON值。<para>原文：
				A raw JSON value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes" tran:state="Complete">
      <summary>字节值的集合。<para>原文：
				A collection of bytes value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid" tran:state="Complete">
      <summary>Guid值。<para>原文：
				A Guid value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri" tran:state="Complete">
      <summary>Uri值。<para>原文：
				A Uri value.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan" tran:state="Complete">
      <summary>时间跨度值。<para>原文：
				A TimeSpan value.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions" tran:state="Complete">
      <summary>包含JSON模式扩展方法。<para>原文：
				Contains the JSON schema extension methods.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)" tran:state="Complete">
      <summary>确定 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 是否有效。<para>原文：
				Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
			</para></summary>
      <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.
			</para></param>
      <param name="schema">要测试的模式。<para>原文：The schema to test with.</para></param>
      <returns>
        <c>true</c>如果指定的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 有效；否则<c>false</c>.<para>原文：<c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)" tran:state="Complete">
      <summary>确定 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 是否有效。<para>原文：
				Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
			</para></summary>
      <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.
			</para></param>
      <param name="schema">要测试的模式。<para>原文：The schema to test with.</para></param>
      <param name="errorMessages">此方法返回时，包含验证时生成的所有错误消息。<para>原文：When this method returns, contains any error messages generated while validating. </para></param>
      <returns>
        <c>true</c>如果指定的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 有效；否则<c>false</c>.<para>原文：<c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)" tran:state="Complete">
      <summary>验证指定的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.
			</para></param>
      <param name="schema">要测试的模式。<para>原文：The schema to test with.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)" tran:state="Complete">
      <summary>验证指定的 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
			</para></summary>
      <param name="source">要测试的源 <see cref="T:Newtonsoft.Json.Linq.JToken" /> 。<para>原文：
				The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.
			</para></param>
      <param name="schema">要测试的模式。<para>原文：The schema to test with.</para></param>
      <param name="validationEventHandler">验证事件处理程序。<para>原文：The validation event handler.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException" tran:state="Complete">
      <summary>返回有关架构异常的详细信息。<para>原文：
				Returns detailed information about the schema exception.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)" tran:state="Complete">
      <summary>使用指定的错误消息初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
				with a specified error message.
			</para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)" tran:state="Complete">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
				with a specified error message and a reference to the inner exception that is the cause of this exception.
			</para></summary>
      <param name="message">解释异常原因的错误消息。<para>原文：The error message that explains the reason for the exception.</para></param>
      <param name="innerException">导致当前异常的异常，或者如果未指定内部异常，则为空引用（在Visual Basic中为Nothing）。<para>原文：The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
			</para></summary>
      <param name="info">保存有关抛出异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 。<para>原文：
				The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
			</para></param>
      <param name="context">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 。<para>原文：
				The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
			</para></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为空。<para>原文：
				The <paramref name="info" /> parameter is null.
			</para></exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">类名为null或 <see cref="P:System.Exception.HResult" /> 为零（0）。<para>原文：
				The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
			</para></exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber" tran:state="Complete">
      <summary>获取指示错误发生位置的行号。<para>原文：
				Gets the line number indicating where the error occurred.
			</para></summary>
      <value>指示错误发生位置的行号。<para>原文：The line number indicating where the error occurred.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition" tran:state="Complete">
      <summary>获取指示错误发生位置的行位置。<para>原文：
				Gets the line position indicating where the error occurred.
			</para></summary>
      <value>指示错误发生位置的行位置。<para>原文：The line position indicating where the error occurred.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path" tran:state="Complete">
      <summary>获取发生错误的JSON的路径。<para>原文：
				Gets the path to the JSON where the error occurred.
			</para></summary>
      <value>发生错误的JSON的路径。<para>原文：The path to the JSON where the error occurred.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver" tran:state="Complete">
      <summary>从id解析 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)" tran:state="Complete">
      <summary>获取指定引用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
			</para></summary>
      <param name="reference">身份证。<para>原文：The id.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 用于指定的参考。<para>原文：
				A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas" tran:state="Complete">
      <summary>获取或设置加载的架构。<para>原文：
				Gets or sets the loaded schemas.
			</para></summary>
      <value>加载的模式。<para>原文：The loaded schemas.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling" tran:state="Complete">
      <summary>为 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" /> 指定未定义的架构Id处理选项。<para>原文：
				Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None" tran:state="Complete">
      <summary>不要推断架构Id。<para>原文：
				Do not infer a schema Id.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName" tran:state="Complete">
      <summary>使用。NET类型名称作为架构Id。<para>原文：
				Use the .NET type name as the schema Id.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName" tran:state="Complete">
      <summary>使用合格的组件。NET类型名称作为架构Id。<para>原文：
				Use the assembly qualified .NET type name as the schema Id.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs" tran:state="Complete">
      <summary>返回与 <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" /> 相关的详细信息。<para>原文：
				Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception" tran:state="Complete">
      <summary>获取与验证错误关联的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> 。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
			</para></summary>
      <value>与验证错误关联的JsonSchemaException。<para>原文：The JsonSchemaException associated with the validation error.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path" tran:state="Complete">
      <summary>获取发生验证错误的JSON位置的路径。<para>原文：
				Gets the path of the JSON location where the validation error occurred.
			</para></summary>
      <value>发生验证错误的JSON位置的路径。<para>原文：The path of the JSON location where the validation error occurred.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message" tran:state="Complete">
      <summary>获取与验证错误对应的文本描述。<para>原文：
				Gets the text description corresponding to the validation error.
			</para></summary>
      <value>文本描述。<para>原文：The text description.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler" tran:state="Complete">
      <summary>表示将处理JSON模式验证事件的回调方法和 <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" /> 。<para>原文：
				Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" tran:state="Complete">
      <summary>解析类型的成员映射，以驼峰式大小写属性名称。<para>原文：
				Resolves member mappings for a type, camel casing property names.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver" tran:state="Complete">
      <summary>由 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 用于解析给定 <see cref="T:System.Type" /> 的 <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> 。<para>原文：
				Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver" tran:state="Complete">
      <summary>由 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 用于解析给定 <see cref="T:System.Type" /> 的 <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> 。<para>原文：
				Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
			</para></summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" /><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" /></para>
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)" tran:state="Complete">
      <summary>解析给定类型的合同。<para>原文：
				Resolves the contract for a given type.
			</para></summary>
      <param name="type">要为其解析合同的类型。<para>原文：The type to resolve a contract for.</para></param>
      <returns>给定类型的合同。<para>原文：The contract for a given type.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
			</para></summary>
      <param name="shareCache">如果设置为<c>true</c><see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> 将使用与相同类型的其他冲突解决程序共享的缓存。共享缓存将显著提高性能，因为昂贵的反射只会发生一次，但如果冲突解决程序的不同实例产生不同的结果，则可能会导致意外行为。当设置为false时，强烈建议将 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> 实例与 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 一起重用。<para>原文：
				If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
				Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
				behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
				recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)" tran:state="Complete">
      <summary>解析给定类型的合同。<para>原文：
				Resolves the contract for a given type.
			</para></summary>
      <param name="type">要为其解析合同的类型。<para>原文：The type to resolve a contract for.</para></param>
      <returns>给定类型的合同。<para>原文：The contract for a given type.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)" tran:state="Complete">
      <summary>获取该类型的可序列化成员。<para>原文：
				Gets the serializable members for the type.
			</para></summary>
      <param name="objectType">获取可序列化成员的类型。<para>原文：The type to get serializable members for.</para></param>
      <returns>类型的可序列化成员。<para>原文：The serializable members for the type.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)" tran:state="Complete">
      <summary>创建构造函数参数。<para>原文：
				Creates the constructor parameters.
			</para></summary>
      <param name="constructor">要为其创建属性的构造函数。<para>原文：The constructor to create properties for.</para></param>
      <param name="memberProperties">类型的成员属性。<para>原文：The type's member properties.</para></param>
      <returns>给定 <see cref="T:System.Reflection.ConstructorInfo" /> 的属性。<para>原文：
				Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)" tran:state="Complete">
      <summary>为给定的 <see cref="T:System.Reflection.ParameterInfo" /> 创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
			</para></summary>
      <param name="matchingMemberProperty">匹配的成员属性。<para>原文：The matching member property.</para></param>
      <param name="parameterInfo">构造函数参数。<para>原文：The constructor parameter.</para></param>
      <returns>为给定的 <see cref="T:System.Reflection.ParameterInfo" /> 创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 。<para>原文：
				A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)" tran:state="Complete">
      <summary>解析合同的默认值 <see cref="T:Newtonsoft.Json.JsonConverter" /> 。<para>原文：
				Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>合同违约 <see cref="T:Newtonsoft.Json.JsonConverter" /> 。<para>原文：
				The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)" tran:state="Complete">
      <summary>为给定类型创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)" tran:state="Complete">
      <summary>确定为给定类型创建的合同类型。<para>原文：
				Determines which contract type is created for the given type.
			</para></summary>
      <param name="objectType">对象的类型。<para>原文：Type of the object.</para></param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> 用于给定类型。<para>原文：
				A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)" tran:state="Complete">
      <summary>为给定的 <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> 创建属性。<para>原文：
				Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
			</para></summary>
      <param name="type">要为其创建属性的类型。<para>原文：The type to create properties for.</para></param>
			/// <param name="memberSerialization">类型的成员序列化模式。<para>原文：The member serialization mode for the type.</para></param><returns>给定 <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> 的属性。<para>原文：
				Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
			</para></returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)" tran:state="Complete">
      <summary>创建序列化程序用于从成员获取和设置值的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> 。<para>原文：
				Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
			</para></summary>
      <param name="member">成员。<para>原文：The member.</para></param>
      <returns>序列化程序用于从成员获取和设置值的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)" tran:state="Complete">
      <summary>为给定的 <see cref="T:System.Reflection.MemberInfo" /> 创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 。<para>原文：
				Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
			</para></summary>
      <param name="memberSerialization">成员的父级 <see cref="T:Newtonsoft.Json.MemberSerialization" /> 。<para>原文：
				The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.
			</para></param>
      <param name="member">要为其创建 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 的成员。<para>原文：
				The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.
			</para></param>
      <returns>为给定的 <see cref="T:System.Reflection.MemberInfo" /> 创建一个 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 。<para>原文：
				A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)" tran:state="Complete">
      <summary>解析属性的名称。<para>原文：
				Resolves the name of the property.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <returns>财产的名称。<para>原文：Name of the property.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)" tran:state="Complete">
      <summary>获取属性的解析名称。<para>原文：
				Gets the resolved name of the property.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <returns>财产的名称。<para>原文：Name of the property.</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration" tran:state="Complete">
      <summary>获取一个值，该值指示是否使用动态代码生成来获取和设置成员。此值由可用的运行时权限决定。<para>原文：
				Gets a value indicating whether members are being get and set using dynamic code generation.
				This value is determined by the runtime permissions available.
			</para></summary>
      <value>
        <c>true</c>如果使用动态代码生成；否则<c>false</c>.<para>原文：<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags" tran:state="Complete">
      <summary>获取或设置默认成员搜索标志。<para>原文：
				Gets or sets the default members search flags.
			</para></summary>
      <value>默认成员搜索标志。<para>原文：The default members search flags.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否应序列化编译器生成的成员。<para>原文：
				Gets or sets a value indicating whether compiler generated members should be serialized.
			</para></summary>
      <value>
        <c>true</c>如果序列化了编译器生成的成员；否则<c>false</c>.<para>原文：<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface" tran:state="Complete">
      <summary>获取或设置一个值，该值指示在序列化和反序列化类型时是否忽略 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口。<para>原文：
				Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
			</para></summary>
      <value>
        <c>true</c>如果在序列化和反序列化类型时忽略 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口；否则<c>false</c>.<para>原文：<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute" tran:state="Complete">
      <summary>获取或设置一个值，该值指示在序列化和反序列化类型时是否忽略 <see cref="T:System.SerializableAttribute" /> 属性。<para>原文：
				Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
			</para></summary>
      <value>
        <c>true</c>如果在序列化和反序列化类型时忽略 <see cref="T:System.SerializableAttribute" /> 属性；否则<c>false</c>.<para>原文：<c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)" tran:state="Complete">
      <summary>解析属性的名称。<para>原文：
				Resolves the name of the property.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <returns>属性名为camel case。<para>原文：The property name camel cased.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder" tran:state="Complete">
      <summary>从类型名解析和加载类时使用的默认序列化绑定器。<para>原文：
				The default serialization binder used when resolving and loading classes from type names.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)" tran:state="Complete">
      <summary>在派生类中重写时，控制序列化对象与类型的绑定。<para>原文：
				When overridden in a derived class, controls the binding of a serialized object to a type.
			</para></summary>
      <param name="assemblyName">指定序列化对象的名称。<para>原文：
				Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.
			</para></param>
      <param name="typeName">指定序列化对象的名称。<para>原文：
				Specifies the <see cref="T:System.Type" /> name of the serialized object.
			</para></param>
      <returns>格式化程序创建新实例的对象类型。<para>原文：
				The type of the object the formatter creates a new instance of.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)" tran:state="Complete">
      <summary>在派生类中重写时，控制序列化对象与类型的绑定。<para>原文：
				When overridden in a derived class, controls the binding of a serialized object to a type.
			</para></summary>
      <param name="serializedType">格式化程序创建新实例的对象类型。<para>原文：The type of the object the formatter creates a new instance of.</para></param>
      <param name="assemblyName">指定序列化对象的名称。<para>原文：
				Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.
			</para></param>
      <param name="typeName">指定序列化对象的名称。<para>原文：
				Specifies the <see cref="T:System.Type" /> name of the serialized object.
			</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext" tran:state="Complete">
      <summary>提供有关错误的信息。<para>原文：
				Provides information surrounding an error.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error" tran:state="Complete">
      <summary>获取错误。<para>原文：
				Gets the error.
			</para></summary>
      <value>错误。<para>原文：The error.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject" tran:state="Complete">
      <summary>获取导致错误的原始对象。<para>原文：
				Gets the original object that caused the error.
			</para></summary>
      <value>导致错误的原始对象。<para>原文：The original object that caused the error.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member" tran:state="Complete">
      <summary>获取导致错误的成员。<para>原文：
				Gets the member that caused the error.
			</para></summary>
      <value>导致错误的成员。<para>原文：The member that caused the error.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path" tran:state="Complete">
      <summary>获取发生错误的JSON位置的路径。<para>原文：
				Gets the path of the JSON location where the error occurred.
			</para></summary>
      <value>发生错误的JSON位置的路径。<para>原文：The path of the JSON location where the error occurred.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否处理此 <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> 。<para>原文：
				Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
			</para></summary>
      <value>
        <c>true</c>如果得到处理；否则<c>false</c>.<para>原文：<c>true</c> if handled; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
				Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
			</para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType" tran:state="Complete">
      <summary>获取集合项的 <see cref="T:System.Type" /> 。<para>原文：
				Gets the <see cref="T:System.Type" /> of the collection items.
			</para></summary>
      <value>收集项目的 <see cref="T:System.Type" /> 。<para>原文：
				The <see cref="T:System.Type" /> of the collection items.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray" tran:state="Complete">
      <summary>获取一个值，该值指示集合类型是否为多维数组。<para>原文：
				Gets a value indicating whether the collection type is a multidimensional array.
			</para></summary>
      <value>
        <c>true</c>如果集合类型是多维数组；否则<c>false</c>.<para>原文：<c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationCallback" tran:state="Complete">
      <summary>处理 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 序列化回调事件。<para>原文：
				Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
			</para></summary>
      <param name="o">引发回调事件的对象。<para>原文：The object that raised the callback event.</para></param>
      <param name="context">流媒体环境。<para>原文：The streaming context.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback" tran:state="Complete">
      <summary>处理 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 序列化错误回调事件。<para>原文：
				Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
			</para></summary>
      <param name="o">引发回调事件的对象。<para>原文：The object that raised the callback event.</para></param>
      <param name="context">流媒体环境。<para>原文：The streaming context.</para></param>
      <param name="errorContext">错误上下文。<para>原文：The error context.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter" tran:state="Complete">
      <summary>在反序列化期间为对象设置扩展数据。<para>原文：
				Sets extension data for an object during deserialization.
			</para></summary>
      <param name="o">要在其上设置扩展数据的对象。<para>原文：The object to set extension data on.</para></param>
      <param name="key">扩展数据键。<para>原文：The extension data key.</para></param>
      <param name="value">扩展数据值。<para>原文：The extension data value.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter" tran:state="Complete">
      <summary>获取序列化期间对象的扩展数据。<para>原文：
				Gets extension data for an object during serialization.
			</para></summary>
      <param name="o">要在其上设置扩展数据的对象。<para>原文：The object to set extension data on.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
				Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
			</para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver" tran:state="Complete">
      <summary>获取或设置属性名解析程序。<para>原文：
				Gets or sets the property name resolver.
			</para></summary>
      <value>属性名解析程序。<para>原文：The property name resolver.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType" tran:state="Complete">
      <summary>获取字典键的 <see cref="T:System.Type" /> 。<para>原文：
				Gets the <see cref="T:System.Type" /> of the dictionary keys.
			</para></summary>
      <value>字典键的 <see cref="T:System.Type" /> 。<para>原文：
				The <see cref="T:System.Type" /> of the dictionary keys.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType" tran:state="Complete">
      <summary>获取字典值的 <see cref="T:System.Type" /> 。<para>原文：
				Gets the <see cref="T:System.Type" /> of the dictionary values.
			</para></summary>
      <value>字典值的 <see cref="T:System.Type" /> 。<para>原文：
				The <see cref="T:System.Type" /> of the dictionary values.
			</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty" tran:state="Complete">
      <summary>将JSON属性映射到。NET成员或构造函数参数。<para>原文：
				Maps a JSON property to a .NET member or constructor parameter.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString" tran:state="Complete">
      <summary>返回表示此实例的 <see cref="T:System.String" /> 。<para>原文：
				Returns a <see cref="T:System.String" /> that represents this instance.
			</para></summary>
      <returns>表示此实例的 <see cref="T:System.String" /> 。<para>原文：
				A <see cref="T:System.String" /> that represents this instance.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName" tran:state="Complete">
      <summary>获取或设置属性的名称。<para>原文：
				Gets or sets the name of the property.
			</para></summary>
      <value>财产的名称。<para>原文：The name of the property.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType" tran:state="Complete">
      <summary>获取或设置声明此属性的类型。<para>原文：
				Gets or sets the type that declared this property.
			</para></summary>
      <value>声明此属性的类型。<para>原文：The type that declared this property.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order" tran:state="Complete">
      <summary>获取或设置成员的序列化和反序列化顺序。<para>原文：
				Gets or sets the order of serialization and deserialization of a member.
			</para></summary>
      <value>序列化或反序列化的数字顺序。<para>原文：The numeric order of serialization or deserialization.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName" tran:state="Complete">
      <summary>获取或设置基础成员或参数的名称。<para>原文：
				Gets or sets the name of the underlying member or parameter.
			</para></summary>
      <value>基础成员或参数的名称。<para>原文：The name of the underlying member or parameter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider" tran:state="Complete">
      <summary>获取将在序列化期间获取并设置 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> 。<para>原文：
				Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
			</para></summary>
      <value>在序列化期间获取并设置 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 的 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType" tran:state="Complete">
      <summary>获取或设置属性的类型。<para>原文：
				Gets or sets the type of the property.
			</para></summary>
      <value>属性的类型。<para>原文：The type of the property.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter" tran:state="Complete">
      <summary>获取或设置属性的 <see cref="T:Newtonsoft.Json.JsonConverter" /> 。如果设置，则此转换器将主持属性类型的合同转换器。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
				If set this converter takes presidence over the contract converter for the property type.
			</para></summary>
      <value>转换器。<para>原文：The converter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter" tran:state="Complete">
      <summary>获取或设置成员转换器。<para>原文：
				Gets or sets the member converter.
			</para></summary>
      <value>成员转换器。<para>原文：The member converter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否忽略此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 。<para>原文：
				Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
			</para></summary>
      <value>
        <c>true</c>如果忽视；否则<c>false</c>.<para>原文：<c>true</c> if ignored; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable" tran:state="Complete">
      <summary>获取或设置一个值，该值指示此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 是否可读。<para>原文：
				Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
			</para></summary>
      <value>
        <c>true</c>如果可读；否则<c>false</c>.<para>原文：<c>true</c> if readable; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable" tran:state="Complete">
      <summary>获取或设置一个值，该值指示此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 是否可写。<para>原文：
				Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
			</para></summary>
      <value>
        <c>true</c>如果可写；否则<c>false</c>.<para>原文：<c>true</c> if writable; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute" tran:state="Complete">
      <summary>获取或设置一个值，该值指示此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 是否具有成员属性。<para>原文：
				Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
			</para></summary>
      <value>
        <c>true</c>如果有成员属性；否则<c>false</c>.<para>原文：<c>true</c> if has a member attribute; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue" tran:state="Complete">
      <summary>获取默认值。<para>原文：
				Gets the default value.
			</para></summary>
      <value>默认值。<para>原文：The default value.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否需要此 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 。<para>原文：
				Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
			</para></summary>
      <value>一个值，指示是否需要此值。<para>原文：
				A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference" tran:state="Complete">
      <summary>获取或设置一个值，该值指示此属性是否保留对象引用。<para>原文：
				Gets or sets a value indicating whether this property preserves object references.
			</para></summary>
      <value>
        <c>true</c>如果该实例为参考；否则<c>false</c>.<para>原文：<c>true</c> if this instance is reference; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling" tran:state="Complete">
      <summary>获取或设置属性null值处理。<para>原文：
				Gets or sets the property null value handling.
			</para></summary>
      <value>空值处理。<para>原文：The null value handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling" tran:state="Complete">
      <summary>获取或设置属性的默认值处理。<para>原文：
				Gets or sets the property default value handling.
			</para></summary>
      <value>默认值处理。<para>原文：The default value handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置属性引用循环处理。<para>原文：
				Gets or sets the property reference loop handling.
			</para></summary>
      <value>参考循环处理。<para>原文：The reference loop handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling" tran:state="Complete">
      <summary>获取或设置属性对象创建处理。<para>原文：
				Gets or sets the property object creation handling.
			</para></summary>
      <value>对象创建处理。<para>原文：The object creation handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling" tran:state="Complete">
      <summary>获取、设置或设置类型名称处理。<para>原文：
				Gets or sets or sets the type name handling.
			</para></summary>
      <value>类型名称处理。<para>原文：The type name handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize" tran:state="Complete">
      <summary>获取或设置一个谓词，该谓词用于确定属性是否应序列化。<para>原文：
				Gets or sets a predicate used to determine whether the property should be serialize.
			</para></summary>
      <value>用于确定属性是否应序列化的谓词。<para>原文：A predicate used to determine whether the property should be serialize.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified" tran:state="Complete">
      <summary>获取或设置用于确定是否应序列化属性的谓词。<para>原文：
				Gets or sets a predicate used to determine whether the property should be serialized.
			</para></summary>
      <value>用于确定属性是否应序列化的谓词。<para>原文：A predicate used to determine whether the property should be serialized.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified" tran:state="Complete">
      <summary>获取或设置用于设置属性是否已反序列化的操作。<para>原文：
				Gets or sets an action used to set whether the property has been deserialized.
			</para></summary>
      <value>用于设置属性是否已反序列化的操作。<para>原文：An action used to set whether the property has been deserialized.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter" tran:state="Complete">
      <summary>获取或设置序列化属性集合项时使用的转换器。<para>原文：
				Gets or sets the converter used when serializing the property's collection items.
			</para></summary>
      <value>集合的项目转换器。<para>原文：The collection's items converter.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference" tran:state="Complete">
      <summary>获取或设置是否将此属性的集合项序列化为引用。<para>原文：
				Gets or sets whether this property's collection items are serialized as a reference.
			</para></summary>
      <value>是否将此属性的集合项序列化为引用。<para>原文：Whether this property's collection items are serialized as a reference.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling" tran:state="Complete">
      <summary>获取或设置序列化属性集合项时使用的类型名称处理。<para>原文：
				Gets or sets the the type name handling used when serializing the property's collection items.
			</para></summary>
      <value>集合的项类型名称处理。<para>原文：The collection's items type name handling.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling" tran:state="Complete">
      <summary>获取或设置序列化属性集合项时使用的引用循环处理。<para>原文：
				Gets or sets the the reference loop handling used when serializing the property's collection items.
			</para></summary>
      <value>集合的项引用循环处理。<para>原文：The collection's items reference loop handling.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 对象的集合。<para>原文：
				A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
			</para></summary>
      <param name="type">类型。<para>原文：The type.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)" tran:state="Complete">
      <summary>在派生类中实现时，从指定元素中提取密钥。<para>原文：
				When implemented in a derived class, extracts the key from the specified element.
			</para></summary>
      <param name="item">从中提取密钥的元素。<para>原文：The element from which to extract the key.</para></param>
      <returns>指定元素的键。<para>原文：The key for the specified element.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)" tran:state="Complete">
      <summary>添加一个 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 对象。<para>原文：
				Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
			</para></summary>
      <param name="property">要添加到集合的属性。<para>原文：The property to add to the collection.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)" tran:state="Complete">
      <summary>获取最接近的匹配对象。首先尝试获取propertyName的精确大小写匹配，然后是不区分大小写的匹配。<para>原文：
				Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
				First attempts to get an exact case match of propertyName and then
				a case insensitive match.
			</para></summary>
      <param name="propertyName">财产的名称。<para>原文：Name of the property.</para></param>
      <returns>一个匹配的属性（如果找到）。<para>原文：A matching property if found.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)" tran:state="Complete">
      <summary>按属性名称获取属性。<para>原文：
				Gets a property by property name.
			</para></summary>
      <param name="propertyName">要获取的属性的名称。<para>原文：The name of the property to get.</para></param>
      <param name="comparisonType">键入属性名字符串比较。<para>原文：Type property name string comparison.</para></param>
      <returns>一个匹配的属性（如果找到）。<para>原文：A matching property if found.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 缺少的成员处理选项。<para>原文：
				Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore" tran:state="Complete">
      <summary>忽略缺少的成员，不要尝试对其进行反序列化。<para>原文：
				Ignore a missing member and do not attempt to deserialize it.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error" tran:state="Complete">
      <summary>在反序列化过程中遇到缺少的成员时抛出 <see cref="T:Newtonsoft.Json.JsonSerializationException" /> 。<para>原文：
				Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling" tran:state="Complete">
      <summary>为 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 指定空值处理选项。<para>原文：
				Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
        <para>原文：<code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" /><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" /></para>
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include" tran:state="Complete">
      <summary>序列化和反序列化对象时包含空值。<para>原文：
				Include null values when serializing and deserializing objects.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore" tran:state="Complete">
      <summary>序列化和反序列化对象时忽略空值。<para>原文：
				Ignore null values when serializing and deserializing objects.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的参考循环处理选项。<para>原文：
				Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error" tran:state="Complete">
      <summary>遇到循环时抛出一个 <see cref="T:Newtonsoft.Json.JsonSerializationException" /> 。<para>原文：
				Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore" tran:state="Complete">
      <summary>忽略循环引用，不序列化。<para>原文：
				Ignore loop references and do not serialize.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize" tran:state="Complete">
      <summary>序列化循环引用。<para>原文：
				Serialize loop references.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema" tran:state="Complete">
      <summary>JSON模式的内存中表示。<para>原文：
				An in-memory representation of a JSON Schema.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)" tran:state="Complete">
      <summary>从指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 中读取 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></summary>
      <param name="reader">包含要读取的JSON模式的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.
			</para></param>
      <returns>表示JSON模式的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 对象。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)" tran:state="Complete">
      <summary>从指定的 <see cref="T:Newtonsoft.Json.JsonReader" /> 中读取 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
			</para></summary>
      <param name="reader">包含要读取的JSON模式的 <see cref="T:Newtonsoft.Json.JsonReader" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.
			</para></param>
      <param name="resolver">解析模式引用时要使用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.
			</para></param>
      <returns>表示JSON模式的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 对象。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)" tran:state="Complete">
      <summary>从包含模式JSON的字符串加载 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
			</para></summary>
      <param name="json">包含JSON的 <see cref="T:System.String" /> 。<para>原文：
				A <see cref="T:System.String" /> that contains JSON.
			</para></param>
      <returns>从包含JSON的字符串填充的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)" tran:state="Complete">
      <summary>解析指定的json。<para>原文：
				Parses the specified json.
			</para></summary>
      <param name="json">json。<para>原文：The json.</para></param>
      <param name="resolver">分解器。<para>原文：The resolver.</para></param>
      <returns>从包含JSON的字符串填充的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)" tran:state="Complete">
      <summary>将此架构写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
			</para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.
			</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)" tran:state="Complete">
      <summary>使用指定的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> 将此架构写入 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
			</para></summary>
      <param name="writer">此方法将写入的 <see cref="T:Newtonsoft.Json.JsonWriter" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.
			</para></param>
      <param name="resolver">解析程序使用。<para>原文：The resolver used.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString" tran:state="Complete">
      <summary>返回表示当前 <see cref="T:System.Object" /> 的 <see cref="T:System.String" /> 。<para>原文：
				Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
			</para></summary>
      <returns>表示电流 <see cref="T:System.Object" /> 的 <see cref="T:System.String" /> 。<para>原文：
				A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id" tran:state="Complete">
      <summary>获取或设置id。<para>原文：
				Gets or sets the id.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title" tran:state="Complete">
      <summary>获取或设置标题。<para>原文：
				Gets or sets the title.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required" tran:state="Complete">
      <summary>获取或设置是否需要该对象。<para>原文：
				Gets or sets whether the object is required.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly" tran:state="Complete">
      <summary>获取或设置对象是否为只读。<para>原文：
				Gets or sets whether the object is read only.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden" tran:state="Complete">
      <summary>获取或设置对象是否对用户可见。<para>原文：
				Gets or sets whether the object is visible to users.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient" tran:state="Complete">
      <summary>获取或设置对象是否为瞬态。<para>原文：
				Gets or sets whether the object is transient.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description" tran:state="Complete">
      <summary>获取或设置对象的描述。<para>原文：
				Gets or sets the description of the object.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type" tran:state="Complete">
      <summary>获取或设置对象允许的值类型。<para>原文：
				Gets or sets the types of values allowed by the object.
			</para></summary>
      <value>类型。<para>原文：The type.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern" tran:state="Complete">
      <summary>获取或设置模式。<para>原文：
				Gets or sets the pattern.
			</para></summary>
      <value>模式。<para>原文：The pattern.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength" tran:state="Complete">
      <summary>获取或设置最小长度。<para>原文：
				Gets or sets the minimum length.
			</para></summary>
      <value>最小长度。<para>原文：The minimum length.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength" tran:state="Complete">
      <summary>获取或设置最大长度。<para>原文：
				Gets or sets the maximum length.
			</para></summary>
      <value>最大长度。<para>原文：The maximum length.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy" tran:state="Complete">
      <summary>获取或设置该值应可除的数字。<para>原文：
				Gets or sets a number that the value should be divisble by.
			</para></summary>
      <value>该值应可除的数字。<para>原文：A number that the value should be divisble by.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum" tran:state="Complete">
      <summary>获取或设置最小值。<para>原文：
				Gets or sets the minimum.
			</para></summary>
      <value>最低限度。<para>原文：The minimum.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum" tran:state="Complete">
      <summary>获取或设置最大值。<para>原文：
				Gets or sets the maximum.
			</para></summary>
      <value>最大值。<para>原文：The maximum.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum" tran:state="Complete">
      <summary>获取或设置一个标志，该标志指示值是否不能等于“minimum”属性定义的数字。<para>原文：
				Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
			</para></summary>
      <value>指示值是否不能等于“最小”属性定义的数字的标志。<para>原文：A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum" tran:state="Complete">
      <summary>获取或设置一个标志，该标志指示该值是否不能等于“maximum”属性定义的数字。<para>原文：
				Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
			</para></summary>
      <value>指示值是否不能等于“最大”属性定义的数字的标志。<para>原文：A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems" tran:state="Complete">
      <summary>获取或设置最小项数。<para>原文：
				Gets or sets the minimum number of items.
			</para></summary>
      <value>项目的最小数量。<para>原文：The minimum number of items.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems" tran:state="Complete">
      <summary>获取或设置最大项数。<para>原文：
				Gets or sets the maximum number of items.
			</para></summary>
      <value>项目的最大数量。<para>原文：The maximum number of items.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items" tran:state="Complete">
      <summary>获取或设置项的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
			</para></summary>
      <value>项目的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否使用位于 <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" /> 的数组位置的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 实例验证数组中的项。<para>原文：
				Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
			</para></summary>
      <value>
        <c>true</c>是否使用其阵列位置验证项目；否则<c>false</c>.<para>原文：<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems" tran:state="Complete">
      <summary>获取或设置附加项的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
			</para></summary>
      <value>附加项目的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否允许添加其他项。<para>原文：
				Gets or sets a value indicating whether additional items are allowed.
			</para></summary>
      <value>
        <c>true</c>如果允许增加项目；否则<c>false</c>.<para>原文：<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems" tran:state="Complete">
      <summary>获取或设置数组项是否必须唯一。<para>原文：
				Gets or sets whether the array items must be unique.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties" tran:state="Complete">
      <summary>获取或设置属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
			</para></summary>
      <value>属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties" tran:state="Complete">
      <summary>获取或设置附加属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
			</para></summary>
      <value>附加属性的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties" tran:state="Complete">
      <summary>获取或设置模式属性。<para>原文：
				Gets or sets the pattern properties.
			</para></summary>
      <value>图案属性。<para>原文：The pattern properties.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否允许其他属性。<para>原文：
				Gets or sets a value indicating whether additional properties are allowed.
			</para></summary>
      <value>
        <c>true</c>如果允许额外的财产；否则<c>false</c>.<para>原文：<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires" tran:state="Complete">
      <summary>获取或设置所需的属性（如果此属性存在）。<para>原文：
				Gets or sets the required property if this property is present.
			</para></summary>
      <value>如果存在此属性，则为所需属性。<para>原文：The required property if this property is present.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum" tran:state="Complete">
      <summary>获取或设置允许的有效枚举值集合。<para>原文：
				Gets or sets the a collection of valid enum values allowed.
			</para></summary>
      <value>允许使用有效枚举值的集合。<para>原文：A collection of valid enum values allowed.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow" tran:state="Complete">
      <summary>获取或设置不允许的类型。<para>原文：
				Gets or sets disallowed types.
			</para></summary>
      <value>不允许的类型。<para>原文：The disallow types.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default" tran:state="Complete">
      <summary>获取或设置默认值。<para>原文：
				Gets or sets the default value.
			</para></summary>
      <value>默认值。<para>原文：The default value.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends" tran:state="Complete">
      <summary>获取或设置此架构扩展的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 集合。<para>原文：
				Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
			</para></summary>
      <value>此模式扩展的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 集合。<para>原文：
				The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format" tran:state="Complete">
      <summary>获取或设置格式。<para>原文：
				Gets or sets the format.
			</para></summary>
      <value>格式。<para>原文：The format.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" tran:state="Complete">
      <summary>从指定的 <see cref="T:System.Type" /> 生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)" tran:state="Complete">
      <summary>从指定类型生成一个 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
			</para></summary>
      <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 的类型。<para>原文：
				The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.
			</para></param>
      <returns>由指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)" tran:state="Complete">
      <summary>从指定类型生成一个 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
			</para></summary>
      <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 的类型。<para>原文：
				The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.
			</para></param>
      <param name="resolver">用于解析模式引用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.
			</para></param>
      <returns>由指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)" tran:state="Complete">
      <summary>从指定类型生成一个 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
			</para></summary>
      <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 的类型。<para>原文：
				The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.
			</para></param>
      <param name="rootSchemaNullable">指定生成的根 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 是否可为空。<para>原文：
				Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.
			</para></param>
      <returns>由指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)" tran:state="Complete">
      <summary>从指定类型生成一个 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
			</para></summary>
      <param name="type">要从中生成 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 的类型。<para>原文：
				The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.
			</para></param>
      <param name="resolver">用于解析模式引用的 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> 。<para>原文：
				The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.
			</para></param>
      <param name="rootSchemaNullable">指定生成的根 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 是否可为空。<para>原文：
				Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.
			</para></param>
      <returns>由指定类型生成的 <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 。<para>原文：
				A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.
			</para></returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling" tran:state="Complete">
      <summary>获取或设置序列化程序处理未定义架构的方式。<para>原文：
				Gets or sets how undefined schemas are handled by the serializer.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver" tran:state="Complete">
      <summary>获取或设置合同解析程序。<para>原文：
				Gets or sets the contract resolver.
			</para></summary>
      <value>合同解决者。<para>原文：The contract resolver.</para></value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> 允许的值类型。<para>原文：
				The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None" tran:state="Complete">
      <summary>没有指定类型。<para>原文：
				No type specified.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String" tran:state="Complete">
      <summary>字符串类型。<para>原文：
				String type.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float" tran:state="Complete">
      <summary>浮动式。<para>原文：
				Float type.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer" tran:state="Complete">
      <summary>整数类型。<para>原文：
				Integer type.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean" tran:state="Complete">
      <summary>布尔型。<para>原文：
				Boolean type.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object" tran:state="Complete">
      <summary>对象类型。<para>原文：
				Object type.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array" tran:state="Complete">
      <summary>数组类型。<para>原文：
				Array type.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null" tran:state="Complete">
      <summary>空类型。<para>原文：
				Null type.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any" tran:state="Complete">
      <summary>任何类型的。<para>原文：
				Any type.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
				Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
			</para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization" tran:state="Complete">
      <summary>获取或设置对象成员序列化。<para>原文：
				Gets or sets the object member serialization.
			</para></summary>
      <value>成员对象序列化。<para>原文：The member object serialization.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired" tran:state="Complete">
      <summary>获取或设置一个值，该值指示是否需要对象的属性。<para>原文：
				Gets or sets a value that indicates whether the object's properties are required.
			</para></summary>
      <value>一个值，指示是否需要对象的属性。<para>原文：
				A value indicating whether the object's properties are required.
			</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties" tran:state="Complete">
      <summary>获取对象的属性。<para>原文：
				Gets the object's properties.
			</para></summary>
      <value>对象的属性。<para>原文：The object's properties.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters" tran:state="Complete">
      <summary>获取任何非默认构造函数所需的构造函数参数<para>原文：
				Gets the constructor parameters required for any non-default constructor
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" tran:state="Complete">
      <summary>获取定义与 <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" /> 一起使用的参数的 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> 实例的集合。<para>原文：
				Gets a collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> instances that define the parameters used with <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" />.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor" tran:state="Complete">
      <summary>获取或设置用于创建对象的重写构造函数。这是在使用JsonConstructor属性标记构造函数时设置的。<para>原文：
				Gets or sets the override constructor used to create the object.
				This is set when a constructor is marked up using the
				JsonConstructor attribute.
			</para></summary>
      <value>重写构造函数。<para>原文：The override constructor.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor" tran:state="Complete">
      <summary>获取或设置用于创建对象的参数化构造函数。<para>原文：
				Gets or sets the parametrized constructor used to create the object.
			</para></summary>
      <value>参数化构造函数。<para>原文：The parametrized constructor.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" tran:state="Complete">
      <summary>获取或设置用于创建对象的函数。设置时，该功能将覆盖 <see cref="P:DefaultCreator" /> 。使用由 <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" /> 集合定义的参数集合调用此函数。<para>原文：
				Gets or sets the function used to create the object. When set this function will override <see cref="P:DefaultCreator" />.
				This function is called with a collection of arguments which are defined by the <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" /> collection.
			</para></summary>
      <value>用于创建对象的函数。<para>原文：The function used to create the object.</para></value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter" tran:state="Complete">
      <summary>获取或设置扩展数据设置程序。<para>原文：
				Gets or sets the extension data setter.
			</para></summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter" tran:state="Complete">
      <summary>获取或设置扩展数据获取程序。<para>原文：
				Gets or sets the extension data getter.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract" tran:state="Complete">
      <summary>
        <see cref="T:Newtonsoft.Json.JsonSerializer" /> 使用的 <see cref="T:System.Type" /> 的合同细节。<para>原文：
				Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
			</para></summary>
      <param name="underlyingType">合同的基础类型。<para>原文：The underlying type for the contract.</para></param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" tran:state="Complete">
      <summary>使用反射获取并设置 <see cref="T:System.Reflection.MemberInfo" /> 的值。<para>原文：
				Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)" tran:state="Complete">
      <summary>初始化 <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> 类的新实例。<para>原文：
				Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
			</para></summary>
      <param name="memberInfo">会员信息。<para>原文：The member info.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)" tran:state="Complete">
      <summary>设置值。<para>原文：
				Sets the value.
			</para></summary>
      <param name="target">要设置值的目标。<para>原文：The target to set the value on.</para></param>
      <param name="value">要在目标上设置的值。<para>原文：The value to set on the target.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)" tran:state="Complete">
      <summary>获取值。<para>原文：
				Gets the value.
			</para></summary>
      <param name="target">要从中获取值的目标。<para>原文：The target to get the value from.</para></param>
      <returns>价值。<para>原文：The value.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute" tran:state="Complete">
      <summary>应用于方法时，指定在序列化对象时发生错误时调用该方法。<para>原文：
				When applied to a method, specifies that the method is called when an error occurs serializing an object.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)" tran:state="Complete">
      <summary>用于生成元对象的Helper方法，该元对象在返回结果的Dynamic上调用特定方法<para>原文：
				Helper method for generating a MetaObject which calls a
				specific method on Dynamic that returns a result
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)" tran:state="Complete">
      <summary>用于生成元对象的Helper方法，该元对象在Dynamic上调用特定方法，但使用其中一个参数作为结果。<para>原文：
				Helper method for generating a MetaObject which calls a
				specific method on Dynamic, but uses one of the arguments for
				the result.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)" tran:state="Complete">
      <summary>用于生成元对象的Helper方法，该元对象在Dynamic上调用特定方法，但使用其中一个参数作为结果。<para>原文：
				Helper method for generating a MetaObject which calls a
				specific method on Dynamic, but uses one of the arguments for
				the result.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions" tran:state="Complete">
      <summary>返回一个限制对象，其中包含当前限制与限制类型的限制合并<para>原文：
				Returns a Restrictions object which includes our current restrictions merged
				with a restriction limiting our type
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1" tran:state="Complete">
      <summary>表示构造对象的方法。<para>原文：
				Represents a method that constructs an object.
			</para></summary>
      <typeparam name="T">要创建的对象类型。<para>原文：The object type to create.</para></typeparam>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonSerializer" /> 的类型名称处理选项。<para>原文：
				Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None" tran:state="Complete">
      <summary>不包括以下内容：。序列化类型时的NET类型名称。<para>原文：
				Do not include the .NET type name when serializing types.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects" tran:state="Complete">
      <summary>包括。序列化为JSON对象结构时的NET类型名称。<para>原文：
				Include the .NET type name when serializing into a JSON object structure.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays" tran:state="Complete">
      <summary>包括。序列化为JSON数组结构时的NET类型名称。<para>原文：
				Include the .NET type name when serializing into a JSON array structure.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All" tran:state="Complete">
      <summary>始终包括以下内容：。序列化时的NET类型名称。<para>原文：
				Always include the .NET type name when serializing.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto" tran:state="Complete">
      <summary>包括。正在序列化的对象的类型与其声明的类型不同时的NET类型名称。<para>原文：
				Include the .NET type name when the type of the object being serialized is not the same as its declared type.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)" tran:state="Complete">
      <summary>将值转换为指定的类型。如果无法转换该值，则会检查该值是否可分配给指定的类型。<para>原文：
				Converts the value to the specified type. If the value is unable to be converted, the
				value is checked whether it assignable to the specified type.
			</para></summary>
      <param name="initialValue">要转换的值。<para>原文：The value to convert.</para></param>
      <param name="culture">转换时要使用的文化。<para>原文：The culture to use when converting.</para></param>
      <param name="targetType">要将值转换或强制转换为的类型。<para>原文：The type to convert or cast the value to.</para></param>
      <returns>转换后的类型。如果转换失败，则返回初始值（如果可分配给目标类型）。<para>原文：
				The converted type. If conversion was unsuccessful, the initial value
				is returned if assignable to the target type.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1" tran:state="Complete">
      <summary>获取枚举类型的名称和值的字典。<para>原文：
				Gets a dictionary of the names and values of an Enum type.
			</para></summary>
      <returns></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)" tran:state="Complete">
      <summary>获取枚举类型的名称和值的字典。<para>原文：
				Gets a dictionary of the names and values of an Enum type.
			</para></summary>
      <param name="enumType">要获取其名称和值的枚举类型。<para>原文：The enum type to get names and values for.</para></param>
      <returns></returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken" tran:state="Complete">
      <summary>指定Json令牌的类型。<para>原文：
				Specifies the type of Json token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None" tran:state="Complete">
      <summary>如果未调用 <see cref="M:Newtonsoft.Json.JsonReader.Read" /> 方法，则由 <see cref="T:Newtonsoft.Json.JsonReader" /> 返回。<para>原文：
				This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject" tran:state="Complete">
      <summary>对象开始标记。<para>原文：
				An object start token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray" tran:state="Complete">
      <summary>数组开始标记。<para>原文：
				An array start token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor" tran:state="Complete">
      <summary>构造函数开始标记。<para>原文：
				A constructor start token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName" tran:state="Complete">
      <summary>对象属性名。<para>原文：
				An object property name.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment" tran:state="Complete">
      <summary>评论。<para>原文：
				A comment.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw" tran:state="Complete">
      <summary>原始JSON。<para>原文：
				Raw JSON.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer" tran:state="Complete">
      <summary>一个整数。<para>原文：
				An integer.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float" tran:state="Complete">
      <summary>花车。<para>原文：
				A float.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String" tran:state="Complete">
      <summary>一串。<para>原文：
				A string.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean" tran:state="Complete">
      <summary>布尔值。<para>原文：
				A boolean.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null" tran:state="Complete">
      <summary>空标记。<para>原文：
				A null token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined" tran:state="Complete">
      <summary>未定义的标记。<para>原文：
				An undefined token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject" tran:state="Complete">
      <summary>对象结束标记。<para>原文：
				An object end token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray" tran:state="Complete">
      <summary>数组结束标记。<para>原文：
				An array end token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor" tran:state="Complete">
      <summary>构造函数结束标记。<para>原文：
				A constructor end token.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date" tran:state="Complete">
      <summary>约会。<para>原文：
				A Date.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes" tran:state="Complete">
      <summary>字节数据。<para>原文：
				Byte data.
			</para></summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer" tran:state="Complete">
      <summary>构建一个字符串。与StringBuilder不同，该类允许重用其内部缓冲区。<para>原文：
				Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
			</para></summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})" tran:state="Complete">
      <summary>确定集合是null还是空。<para>原文：
				Determines whether the collection is null or empty.
			</para></summary>
      <param name="collection">收藏。<para>原文：The collection.</para></param>
      <returns>
        <c>true</c>如果集合为null或空；否则<c>false</c>.<para>原文：<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})" tran:state="Complete">
      <summary>将指定集合的元素添加到指定的泛型IList。<para>原文：
				Adds the elements of the specified collection to the specified generic IList.
			</para></summary>
      <param name="initial">要添加到的列表。<para>原文：The list to add to.</para></param>
      <param name="collection">要添加的元素的集合。<para>原文：The collection of elements to add.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" tran:state="Complete">
      <summary>使用指定的IEqualityComparer返回序列中第一次出现的索引。<para>原文：
				Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
			</para></summary>
      <typeparam name="TSource">源元素的类型。<para>原文：The type of the elements of source.</para></typeparam>
      <param name="list">定位一个值的序列。<para>原文：A sequence in which to locate a value.</para></param>
      <param name="value">要在序列中定位的对象<para>原文：The object to locate in the sequence</para></param>
      <param name="comparer">用于比较值的相等比较器。<para>原文：An equality comparer to compare values.</para></param>
      <returns>整个序列中首次出现的值的零基索引（如果找到）；否则，-1。<para>原文：The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)" tran:state="Complete">
      <summary>获取类型化集合项的类型。<para>原文：
				Gets the type of the typed collection's items.
			</para></summary>
      <param name="type">类型。<para>原文：The type.</para></param>
      <returns>类型化集合项的类型。<para>原文：The type of the typed collection's items.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)" tran:state="Complete">
      <summary>获取成员的基础类型。<para>原文：
				Gets the member's underlying type.
			</para></summary>
      <param name="member">成员。<para>原文：The member.</para></param>
      <returns>成员的基础类型。<para>原文：The underlying type of the member.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)" tran:state="Complete">
      <summary>确定成员是否为索引属性。<para>原文：
				Determines whether the member is an indexed property.
			</para></summary>
      <param name="member">成员。<para>原文：The member.</para></param>
      <returns>
        <c>true</c>如果成员是索引属性；否则<c>false</c>.<para>原文：<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)" tran:state="Complete">
      <summary>确定该属性是否为索引属性。<para>原文：
				Determines whether the property is an indexed property.
			</para></summary>
      <param name="property">财产。<para>原文：The property.</para></param>
      <returns>
        <c>true</c>如果该属性是索引属性；否则<c>false</c>.<para>原文：<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)" tran:state="Complete">
      <summary>获取对象上成员的值。<para>原文：
				Gets the member's value on the object.
			</para></summary>
      <param name="member">成员。<para>原文：The member.</para></param>
      <param name="target">目标物体。<para>原文：The target object.</para></param>
      <returns>成员在对象上的值。<para>原文：The member's value on the object.</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)" tran:state="Complete">
      <summary>在目标对象上设置成员的值。<para>原文：
				Sets the member's value on the target object.
			</para></summary>
      <param name="member">成员。<para>原文：The member.</para></param>
      <param name="target">目标。<para>原文：The target.</para></param>
      <param name="value">价值。<para>原文：The value.</para></param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)" tran:state="Complete">
      <summary>确定是否可以读取指定的MemberInfo。<para>原文：
				Determines whether the specified MemberInfo can be read.
			</para></summary>
      <param name="member">MemberInfo以确定是否可以读取。<para>原文：The MemberInfo to determine whether can be read.</para></param>
			/// <param name="nonPublic">如果设置为<c>true</c>然后允许非公开获取该成员。<para>原文：
				if set to <c>true</c> then allow the member to be gotten non-publicly.
			</para></param><returns><c>true</c>是否可以读取指定的MemberInfo；否则<c>false</c>.<para>原文：<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
			</para></returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)" tran:state="Complete">
      <summary>确定是否可以设置指定的MemberInfo。<para>原文：
				Determines whether the specified MemberInfo can be set.
			</para></summary>
      <param name="member">用于确定是否可以设置的MemberInfo。<para>原文：The MemberInfo to determine whether can be set.</para></param>
      <param name="nonPublic">如果设置为<c>true</c>然后允许非公开地设置成员。<para>原文：
				if set to <c>true</c> then allow the member to be set non-publicly.
			</para></param>
      <param name="canSetReadOnly">如果设置为<c>true</c>然后允许将成员设置为只读。<para>原文：
				if set to <c>true</c> then allow the member to be set if read-only.
			</para></param>
      <returns>
        <c>true</c>是否可以设置指定的MemberInfo；否则<c>false</c>.<para>原文：<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)" tran:state="Complete">
      <summary>确定字符串是否全部为空白。空字符串将返回false。<para>原文：
				Determines whether the string is all white space. Empty string will return false.
			</para></summary>
      <param name="s">用于测试是否全部为空白的字符串。<para>原文：The string to test whether it is all white space.</para></param>
      <returns>
        <c>true</c>如果字符串都是空白；否则<c>false</c>.<para>原文：<c>true</c> if the string is all white space; otherwise, <c>false</c>.
			</para></returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)" tran:state="Complete">
      <summary>使空字符串为空。<para>原文：
				Nulls an empty string.
			</para></summary>
      <param name="s">绳子。<para>原文：The string.</para></param>
      <returns>如果字符串为Null，则为Null，否则字符串将保持不变。<para>原文：Null if the string was null, otherwise the string unchanged.</para></returns>
    </member>
    <member name="T:Newtonsoft.Json.WriteState" tran:state="Complete">
      <summary>指定 <see cref="T:Newtonsoft.Json.JsonWriter" /> 的状态。<para>原文：
				Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error" tran:state="Complete">
      <summary>已引发异常，导致 <see cref="T:Newtonsoft.Json.JsonWriter" /> 处于无效状态。您可以调用 <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> 方法将 <see cref="T:Newtonsoft.Json.JsonWriter" /> 放入<c>Closed</c>状态任何其他 <see cref="T:Newtonsoft.Json.JsonWriter" /> 方法调用都会导致抛出 <see cref="T:System.InvalidOperationException" /> 。<para>原文：
				An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
				You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
				Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed" tran:state="Complete">
      <summary>已调用 <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> 方法。<para>原文：
				The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object" tran:state="Complete">
      <summary>正在写入一个对象。<para>原文：
				An object is being written.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array" tran:state="Complete">
      <summary>正在编写一个数组。<para>原文：
				A array is being written.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor" tran:state="Complete">
      <summary>正在编写构造函数。<para>原文：
				A constructor is being written.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property" tran:state="Complete">
      <summary>正在编写一个属性。<para>原文：
				A property is being written.
			</para></summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start" tran:state="Complete">
      <summary>尚未调用写入方法。<para>原文：
				A write method has not been called.
			</para></summary>
    </member>
  </members>
</doc>